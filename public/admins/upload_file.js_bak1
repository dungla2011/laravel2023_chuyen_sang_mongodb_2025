function byteSize2(bytes) {
    var marker = 1024; // Change to 1000 if required
    var decimal = 3; // Change as required
    var kiloBytes = marker; // One Kilobyte is 1024 bytes
    var megaBytes = marker * marker; // One MB is 1024 KB
    var gigaBytes = marker * marker * marker; // One GB is 1024 MB
    var teraBytes = marker * marker * marker * marker; // One TB is 1024 GB

    // return bytes if less than a KB
    if (bytes < kiloBytes) return bytes + " Bytes";
    // return KB if less than a MB
    else if (bytes < megaBytes) return (bytes / kiloBytes).toFixed(decimal) + " KB";
    // return MB if less than a GB
    else if (bytes < gigaBytes) return (bytes / megaBytes).toFixed(decimal) + " MB";
    // return GB if less than a TB
    else return (bytes / gigaBytes).toFixed(decimal) + " GB";
}

clsUpload = function () {

}

clsUpload.url_server = '_need_set_';
clsUpload.bind_selector_upload = null;
clsUpload.bind_selector_result = null;
clsUpload.upload_queue = 0;
clsUpload.uploading = 0;
clsUpload.upload_done = 0;
clsUpload.upload_total = 0;
clsUpload.upload_error = 0;
clsUpload.maxFileCC = 2;
clsUpload.set_parent_id = 0;
clsUpload.mFileUpload = [];

//Nếu có hàm này, sẽ được gọi sau khi upload done, để làm tiếp các task nếu cần...
clsUpload.upload_done_call_function = '';


$(document).ready(function () {

    clsUpload.preventDefaults = function (e) {
        e.preventDefault()
        e.stopPropagation()
    }

    clsUpload.highlight = function (e) {
        dropAreaUpload.classList.add('highlight')
    }

    clsUpload.unhighlight = function (e) {
        dropAreaUpload.classList.remove('active')
    }

    clsUpload.handleDrop = function (e) {
        var dt = e.dataTransfer
        var files = dt.files

        console.log(" FIles : " + files);

        clsUpload.handleFiles(files)
    }

    clsUpload.updateProgress = function (fileNumber, percent, loaded) {
        let progressBarI = document.getElementById('progress_bar' + fileNumber);
        progressBarI.value = percent;
        var speedAll = (loaded / (Date.now() - clsUpload.mFileUpload[fileNumber].startTimeUploadLad) / 1000).toFixed(2);
        var speed = ((loaded - clsUpload.mFileUpload[fileNumber].lastByteUploadLad) / (Date.now() - clsUpload.mFileUpload[fileNumber].lastTimeUploadLad) / 1000).toFixed(2);
        if (isNaN(speed)) {
            return;
        }
        clsUpload.mFileUpload[fileNumber].lastTimeUploadLad = Date.now();
        clsUpload.mFileUpload[fileNumber].lastByteUploadLad = loaded;
        document.getElementById('percent_upload_' + fileNumber).innerText = percent.toFixed(2) + " % (" + speed + " MB/s)";
    }

    clsUpload.handleFiles = function (files) {
        files = [...files]
        console.log(" handleFiles files : ", files);

        //Get file size, filetype: to limit size, filetype here

        //initializeProgress(files.length)
        files.forEach(clsUpload.addFileToUpload)
        //files.forEach(previewFile)
    }

    clsUpload.countUploadInfo = function () {
        var ret = 0;
        clsUpload.upload_queue = 0;
        clsUpload.uploading = 0;
        clsUpload.upload_done = 0;
        clsUpload.upload_total = 0;

        for (var i = 0; i < clsUpload.mFileUpload.length; i++) {
            if (clsUpload.mFileUpload[i].upload_status_lad == 'doing')
                clsUpload.uploading++;
            if (clsUpload.mFileUpload[i].upload_status_lad == 0)
                clsUpload.upload_queue++;
            if (clsUpload.mFileUpload[i].upload_status_lad == 'error')
                clsUpload.upload_error++;
            if (clsUpload.mFileUpload[i].upload_status_lad == 'done')
                clsUpload.upload_done++;
        }

        return clsUpload.uploading;
    }

    clsUpload.showStatusUpload = function () {
        $("span[data-id='upload_info']").html("Doing: " + clsUpload.countUploadInfo() + ", done: " + clsUpload.upload_done + ', queue: ' + clsUpload.upload_queue + '');
    }

    clsUpload.startUploadOne = function (file) {

        file.upload_status_lad = 'doing';
        file.startTimeUploadLad = Date.now();
        file.lastTimeUploadLad = Date.now();
        file.lastByteUploadLad = 0;

        console.log(" Continue upload : ", file.upload_id_lad, " = ", file);

        var url = clsUpload.url_server;
        var xhr = new XMLHttpRequest()

        file.xhrLad = xhr;

        var i = file.upload_id_lad;

        console.log("Upload now: ", file);

        console.log("countFile = " + i);

        clsUpload.showStatusUpload();

        var formData = new FormData()
        xhr.open('POST', url, true)
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')

        // Update progress (can be used to show progress indicator)
        xhr.upload.addEventListener("progress", function (e) {
            //console.log("addEventListener Update progressI: " , i);
            clsUpload.updateProgress(i, (e.loaded * 100.0 / e.total) || 100, e.loaded)
        })

        xhr.addEventListener('readystatechange', function (e) {
            if (xhr.readyState == 4 && xhr.status == 200) {
                clsUpload.updateProgress(i, 100) // <- Add this
                file.upload_status_lad = 'done';

                $("#div_upload_status_one_" + file.upload_id_lad).remove();
                clsUpload.showStatusUpload();
                console.log(" DONE ? uploadIdLad = ", file.upload_id_lad);
                console.log(" server return: ", xhr.response);


                $("#result-area-upload").show();

                if (clsUpload.upload_done_call_function) {
                    //Create this function on production:
                    clsUpload['upload_done_call_function'](xhr.response);
                }

                $("#" + clsUpload.bind_selector_result).prepend(xhr.response + "<br>")

                clsUpload.upload_done++;
                clsUpload.excuteUploadFile();


            } else if (xhr.readyState == 4 && xhr.status != 200) {
                // Error. Inform the user
                clsUpload.showStatusUpload();
                console.log(" Error ? uploadIdLad = ", xhr.uploadIdLad);
                console.log(" server return: ", xhr.response);
                file.upload_status_lad = 'error';
                clsUpload.upload_error++;

                clsUpload.excuteUploadFile();
            }
        })

        formData.append('upload_preset', 'ujpu6gyk')
        formData.append('set_parent_id', clsUpload.set_parent_id)
        formData.append('file', file)

        xhr.send(formData)
    }

    clsUpload.excuteUploadFile = function () {
        for (var k = 0; k < clsUpload.mFileUpload.length; k++) {
            if (clsUpload.mFileUpload[k].upload_status_lad == 0) {
                if (clsUpload.countUploadInfo() >= clsUpload.maxFileCC) {
                    console.log(" Number thread ", clsUpload.maxFileCC, " ...");
                    return;
                }
                var file = clsUpload.mFileUpload[k];
                clsUpload.startUploadOne(file);
            }
        }
    }

    clsUpload.addFileToUpload = function (file, i) {

        file.upload_status_lad = 0;
        file.upload_id_lad = clsUpload.mFileUpload.length;
        clsUpload.mFileUpload.push(file);
        clsUpload.upload_total++;
        var i = file.upload_id_lad;
        document.querySelector('[data-id="div_upload_status_all"]').insertAdjacentHTML('beforeend',
            '<div style="margin-bottom:5px; background-color: snow; padding: 5px 8px; border: 1px solid #ccc; border-radius: 5px" ' +
            'id="div_upload_status_one_' + i + '"> ' + file.name + ' (' + byteSize2(file.size) + ') <br/> ' +
            '<button title="cancel upload" id="cancel_upload_' + i + '" style="margin-top: 5px; font-size: smaller; border-radius: 5px"> Cancel </button>' +
            '<progress class="progress_bar" id="progress_bar' + i + '" max=100 value=0></progress> <span id="percent_upload_' + i + '"> ... </span> </div>');
        clsUpload.showStatusUpload();

        //Excute Upload right after add files, or add a button to start upload with this command:
        clsUpload.excuteUploadFile()
    }

    // ************************ Drag and drop ***************** //
    let dropAreaUpload = document.getElementById(clsUpload.bind_selector_upload)

// Prevent default drag behaviors
    if (dropAreaUpload) {
        ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropAreaUpload.addEventListener(eventName, clsUpload.preventDefaults, false)
            document.body.addEventListener(eventName, clsUpload.preventDefaults, false)
        })

        // Highlight drop area when item is dragged over it
        ;['dragenter', 'dragover'].forEach(eventName => {
            dropAreaUpload.addEventListener(eventName, clsUpload.highlight, false)
        })

        ;['dragleave', 'drop'].forEach(eventName => {
            dropAreaUpload.addEventListener(eventName, clsUpload.unhighlight, false)
        })

        // Handle dropped files
        dropAreaUpload.addEventListener('drop', clsUpload.handleDrop, false)

    }



    $(document).on('click', "[id^=cancel_upload_]", function () {
        var id = this.id.replace('cancel_upload_', '')
        console.log(" cancel_upload_ id = " + id);
        //Stop Upload:
        clsUpload.mFileUpload[id].xhrLad.abort();
        $("#div_upload_status_one_" + id).remove();
        clsUpload.showStatusUpload();
    })
});
