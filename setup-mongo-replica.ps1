# MongoDB Replica Set Setup Script for Windows
# T·ª± ƒë·ªông c·∫•u h√¨nh MongoDB replica set ƒë·ªÉ h·ªó tr·ª£ transactions

param(
    [switch]$Install,
    [switch]$Start,
    [switch]$Stop,
    [switch]$Status,
    [switch]$InitReplica,
    [switch]$Help
)

$MONGO_PATH = "E:\Program Files\MongoDB\Server\7.0\bin"
$MONGO_CONFIG = "E:\Program Files\MongoDB\Server\7.0\bin\mongod.cfg"
$MONGO_DATA = "E:\Program Files\MongoDB\Server\7.0\data"
$SERVICE_NAME = "MongoDB"

function Write-Info {
    param($Message)
    Write-Host "üîß $Message" -ForegroundColor Cyan
}

function Write-Success {
    param($Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Error {
    param($Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Write-Warning {
    param($Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Test-AdminPrivileges {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Show-Help {
    Write-Host @"
üîß MongoDB Replica Set Setup Script

USAGE:
    .\setup-mongo-replica.ps1 [OPTIONS]

OPTIONS:
    -Install      C√†i ƒë·∫∑t v√† c·∫•u h√¨nh MongoDB service v·ªõi replica set
    -Start        Kh·ªüi ƒë·ªông MongoDB service
    -Stop         D·ª´ng MongoDB service  
    -Status       Ki·ªÉm tra tr·∫°ng th√°i MongoDB service v√† replica set
    -InitReplica  Kh·ªüi t·∫°o replica set (ch·ªâ ch·∫°y sau khi service ƒë√£ start)
    -Help         Hi·ªÉn th·ªã help n√†y

EXAMPLES:
    # C√†i ƒë·∫∑t ho√†n ch·ªânh
    .\setup-mongo-replica.ps1 -Install

    # Kh·ªüi ƒë·ªông service
    .\setup-mongo-replica.ps1 -Start
    
    # Ki·ªÉm tra tr·∫°ng th√°i
    .\setup-mongo-replica.ps1 -Status

"@ -ForegroundColor Yellow
}

function Install-MongoService {
    Write-Info "C√†i ƒë·∫∑t MongoDB Service v·ªõi Replica Set..."
    
    # Check if running as admin
    if (-not (Test-AdminPrivileges)) {
        Write-Error "Script c·∫ßn ch·∫°y v·ªõi quy·ªÅn Administrator!"
        Write-Info "H√£y m·ªü PowerShell as Administrator v√† ch·∫°y l·∫°i script"
        exit 1
    }
    
    # Stop existing service if running
    $existingService = Get-Service -Name $SERVICE_NAME -ErrorAction SilentlyContinue
    if ($existingService) {
        Write-Info "D·ª´ng MongoDB service hi·ªán t·∫°i..."
        Stop-Service -Name $SERVICE_NAME -Force -ErrorAction SilentlyContinue
        
        Write-Info "X√≥a MongoDB service c≈©..."
        & "$MONGO_PATH\mongod.exe" --remove --serviceName $SERVICE_NAME
        Start-Sleep -Seconds 3
    }
    
    # Verify config file exists and has replica set config
    if (-not (Test-Path $MONGO_CONFIG)) {
        Write-Error "Kh√¥ng t√¨m th·∫•y file config: $MONGO_CONFIG"
        exit 1
    }
    
    $configContent = Get-Content $MONGO_CONFIG -Raw
    if ($configContent -notmatch "replSetName") {
        Write-Warning "File config ch∆∞a c√≥ c·∫•u h√¨nh replica set"
        Write-Info "C·∫ßn th√™m v√†o mongod.cfg:"
        Write-Host @"
replication:
  replSetName: "rs0"
"@ -ForegroundColor Yellow
        exit 1
    }
    
    Write-Success "File config ƒë√£ c√≥ c·∫•u h√¨nh replica set"
    
    # Create data directory if not exists
    if (-not (Test-Path $MONGO_DATA)) {
        Write-Info "T·∫°o th∆∞ m·ª•c data: $MONGO_DATA"
        New-Item -ItemType Directory -Path $MONGO_DATA -Force | Out-Null
    }
    
    # Install MongoDB as Windows Service
    Write-Info "C√†i ƒë·∫∑t MongoDB service v·ªõi config replica set..."
    $installCmd = "& `"$MONGO_PATH\mongod.exe`" --config `"$MONGO_CONFIG`" --install --serviceName `"$SERVICE_NAME`""
    
    try {
        Invoke-Expression $installCmd
        Write-Success "ƒê√£ c√†i ƒë·∫∑t MongoDB service th√†nh c√¥ng"
    }
    catch {
        Write-Error "L·ªói khi c√†i ƒë·∫∑t service: $_"
        exit 1
    }
    
    # Set service to start automatically
    Write-Info "C·∫•u h√¨nh service t·ª± ƒë·ªông kh·ªüi ƒë·ªông..."
    Set-Service -Name $SERVICE_NAME -StartupType Automatic
    
    # Start the service
    Write-Info "Kh·ªüi ƒë·ªông MongoDB service..."
    Start-Service -Name $SERVICE_NAME
    
    Write-Success "MongoDB service ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† kh·ªüi ƒë·ªông"
    Write-Info "ƒê·ª£i 5 gi√¢y ƒë·ªÉ MongoDB kh·ªüi ƒë·ªông ho√†n t·∫•t..."
    Start-Sleep -Seconds 5
    
    # Initialize replica set
    Initialize-ReplicaSet
}

function Start-MongoService {
    Write-Info "Kh·ªüi ƒë·ªông MongoDB service..."
    
    $service = Get-Service -Name $SERVICE_NAME -ErrorAction SilentlyContinue
    if (-not $service) {
        Write-Error "MongoDB service ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Ch·∫°y v·ªõi -Install tr∆∞·ªõc"
        exit 1
    }
    
    if ($service.Status -eq "Running") {
        Write-Success "MongoDB service ƒë√£ ƒëang ch·∫°y"
    }
    else {
        Start-Service -Name $SERVICE_NAME
        Write-Success "ƒê√£ kh·ªüi ƒë·ªông MongoDB service"
    }
}

function Stop-MongoService {
    Write-Info "D·ª´ng MongoDB service..."
    
    $service = Get-Service -Name $SERVICE_NAME -ErrorAction SilentlyContinue
    if ($service -and $service.Status -eq "Running") {
        Stop-Service -Name $SERVICE_NAME -Force
        Write-Success "ƒê√£ d·ª´ng MongoDB service"
    }
    else {
        Write-Info "MongoDB service kh√¥ng ƒëang ch·∫°y"
    }
}

function Get-MongoStatus {
    Write-Info "Ki·ªÉm tra tr·∫°ng th√°i MongoDB..."
    
    # Check Windows Service
    $service = Get-Service -Name $SERVICE_NAME -ErrorAction SilentlyContinue
    if ($service) {
        Write-Host "üîß Service Status: $($service.Status)" -ForegroundColor Cyan
        Write-Host "üîß Service Start Type: $($service.StartType)" -ForegroundColor Cyan
    }
    else {
        Write-Warning "MongoDB service ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return
    }
    
    if ($service.Status -ne "Running") {
        Write-Warning "MongoDB service kh√¥ng ƒëang ch·∫°y"
        return
    }
    
    # Check MongoDB connection and replica set status
    Write-Info "Ki·ªÉm tra k·∫øt n·ªëi MongoDB v√† replica set..."
    
    $mongoCmd = @"
try {
    var status = rs.status();
    print('‚úÖ Replica Set Name: ' + status.set);
    print('‚úÖ Replica Set State: ' + status.myState);
    print('‚úÖ Members: ' + status.members.length);
    status.members.forEach(function(member) {
        print('   - ' + member.name + ' (' + member.stateStr + ')');
    });
    print('üéâ TRANSACTIONS SUPPORTED!');
} catch(e) {
    if (e.message.includes('no replset config')) {
        print('‚ö†Ô∏è  Replica set ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
        print('üí° Ch·∫°y: .\setup-mongo-replica.ps1 -InitReplica');
    } else {
        print('‚ùå Error: ' + e.message);
    }
}
"@
    
    $tempFile = [System.IO.Path]::GetTempFileName() + ".js"
    Set-Content -Path $tempFile -Value $mongoCmd
    
    try {
        & "$MONGO_PATH\mongo.exe" --quiet $tempFile
    }
    catch {
        Write-Error "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MongoDB: $_"
    }
    finally {
        Remove-Item $tempFile -ErrorAction SilentlyContinue
    }
}

function Initialize-ReplicaSet {
    Write-Info "Kh·ªüi t·∫°o Replica Set..."
    
    # Check if service is running
    $service = Get-Service -Name $SERVICE_NAME -ErrorAction SilentlyContinue
    if (-not $service -or $service.Status -ne "Running") {
        Write-Error "MongoDB service ch∆∞a ch·∫°y. Kh·ªüi ƒë·ªông service tr∆∞·ªõc."
        exit 1
    }
    
    $initCmd = @"
try {
    var config = {
        _id: 'rs0',
        members: [
            { _id: 0, host: 'localhost:27017' }
        ]
    };
    var result = rs.initiate(config);
    if (result.ok === 1) {
        print('‚úÖ Replica set ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!');
        print('üéâ MongoDB hi·ªán ƒë√£ h·ªó tr·ª£ transactions!');
    } else {
        print('‚ùå L·ªói kh·ªüi t·∫°o replica set: ' + JSON.stringify(result));
    }
} catch(e) {
    if (e.message.includes('already initialized')) {
        print('‚úÖ Replica set ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥');
        print('üéâ MongoDB ƒë√£ h·ªó tr·ª£ transactions!');
    } else {
        print('‚ùå Error: ' + e.message);
    }
}
"@
    
    $tempFile = [System.IO.Path]::GetTempFileName() + ".js"
    Set-Content -Path $tempFile -Value $initCmd
    
    Write-Info "ƒê·ª£i MongoDB s·∫µn s√†ng..."
    Start-Sleep -Seconds 3
    
    try {
        & "$MONGO_PATH\mongo.exe" --quiet $tempFile
        Write-Success "Ho√†n t·∫•t kh·ªüi t·∫°o replica set"
    }
    catch {
        Write-Error "L·ªói khi kh·ªüi t·∫°o replica set: $_"
    }
    finally {
        Remove-Item $tempFile -ErrorAction SilentlyContinue
    }
}

# Main execution
Write-Host @"
üî• MONGODB REPLICA SET SETUP FOR WINDOWS
========================================
"@ -ForegroundColor Yellow

if ($Help) {
    Show-Help
    exit 0
}

if ($Install) {
    Install-MongoService
}
elseif ($Start) {
    Start-MongoService
}
elseif ($Stop) {
    Stop-MongoService
}
elseif ($Status) {
    Get-MongoStatus
}
elseif ($InitReplica) {
    Initialize-ReplicaSet
}
else {
    Write-Warning "Kh√¥ng c√≥ tham s·ªë n√†o ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"
    Show-Help
}

Write-Host "`nüéØ Script ho√†n t·∫•t!" -ForegroundColor Green
