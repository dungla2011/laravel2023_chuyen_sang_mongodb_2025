<?php

namespace App\Http\ControllerApi;

use App\Components\clsParamRequestEx;
use App\Models\Data;
use App\Models\User;
use App\Repositories\UserRepositoryInterface;
use Illuminate\Http\Request;

class UserControllerApi extends BaseApiController
{
    //    public function __construct(User $data) {
    //        $this->data = $data;
    //    }
    //
    public function __construct(UserRepositoryInterface $data, clsParamRequestEx $objPrEx)
    {
        $this->data = $data;
        $this->objParamEx = $objPrEx;

    }

    public function getApiToken(Request $request)
    {
        $email = $request->email;
        $password = $request->password;
        $user = User::where('email', $email)->first();
        if ($user) {
            if (password_verify($password, $user->password)) {
                return rtJsonApiDone($user->api_token);
            }
        }
        return rtJsonApiError('Invalid email or password');
    }

    public function add(Request $request)
    {
        if ($request->return_if_exist) {
            //Kiểm tra đã tồn tại chưa:
            if ($request->email) {
                $obj = User::where('email', $request->email)->first();
                if ($obj) {
                    return rtJsonApiDone($obj->id, " Đã thêm trước đây: $obj->id");
                }
            }
            $request->query->remove('return_if_exist');
        }

        return parent::add($request); // TODO: Change the autogenerated stub
    }

    public function getUserId(Request $request)
    {

        if (! User::isSupperAdmin()) {
            //if(!isAdminACP_())
            return response('Not valid access', 400);
        }
        //        echo "<pre> >>> " . __FILE__ . "(" . __LINE__ . ")<br/>";
        //        print_r($request->all());
        //        echo "</pre>";
        $ret = [];
        if ($email = $request->term) {

            if (is_numeric($request->term)) {
                $mm = User::where('id', $request->term)->limit(50)->get();
            } else {
                if($request->start_with)
//                    $mm = User::where('email', 'LIKE', "$email%")->limit(50)->get();
                    $mm = User::where(function($query) use ($email) {
                        $query->where('email', 'LIKE', "$email%")
                            ->orWhere('username', 'LIKE', "$email%");
                    })->limit(50)->get();

                else
                    $mm = User::where(function($query) use ($email) {
                        $query->where('email', 'LIKE', "%$email%")
                            ->orWhere('username', 'LIKE', "%$email%");
                    })->limit(50)->get();

            }
            foreach ($mm as $us) {
                //                echo "<br> $us->email";
                $ret[] = ['id' => $us->id, 'label' => "$us->email | $us->username", 'value' => $us->email];
            }
        } else {
            $mm = User::limit(20)->get();
            foreach ($mm as $us) {
                //                echo "<br> $us->email";
                $ret[] = ['id' => $us->id, 'label' => "$us->email", 'value' => $us->email];
            }
        }

        return response()->json($ret);
    }
}
