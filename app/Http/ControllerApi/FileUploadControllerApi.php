<?php

namespace App\Http\ControllerApi;

use App\Components\clsParamRequestEx;
use App\Models\Data;
use App\Models\FileCloud;
use App\Models\FileUpload;
use App\Models\FolderFile;
use App\Models\ModelGlxBase;
use App\Models\SiteMng;
use App\Models\TmpDownloadSession;
use App\Models\User;
use App\Models\UserCloud;
use App\Repositories\FileRepositoryInterface;
use App\Support\HTMLPurifierSupport;
use Illuminate\Http\Request;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class FileUploadControllerApi extends BaseApiController
{
    public function __construct(FileRepositoryInterface $data, clsParamRequestEx $objPrEx)
    {
        $this->data = $data;
        $this->objParamEx = $objPrEx;
    }

    public function un_delete(Request $request)
    {
        if ($ret = FileUpload::checkQuota(Auth::id(), 'Không phục hồi được, vì ')) {
            return $ret;
        }

        return parent::un_delete($request); // TODO: Change the autogenerated stub
    }


    /**
     * @param $request
     * @param $returnObjOnly
     * @return array|\Illuminate\Http\JsonResponse
     * @throws \Exception
* $std = new stdClass();
* $std->file_name = $basename;
* $std->file_size = $filesize_org;
* $std->file_path_local_upload_ = $filename_on_server;
* $std->file_path_local_is_copy_ = 0;
* $std->folder_id = $folderID;
* $std->user_id = $objUser->id;
* $ret = \App\Http\ControllerApi\FileUploadControllerApi::uploadStatic($std);
     *
    */
    public static function uploadStatic($request, $returnObjOnly = 0)
    {

        try {

            //Todo: tester need check quota here
            $userid = ($request->user_id ?? null) ?? getCurrentUserId();
            if(!$userid) {
//                loi("Not found uid1?");
                //mặc định public user upload vào admin
                $userid = 1;
            }

            if($userid  == 1 || $userid  == 3){

            }

            if ($ret = FileUpload::checkQuota($userid, 'Quá giới hạn upload ('.$userid.'), vì ')) {
                return $ret;
            }
            $userCloud = UserCloud::getOrCreateNewUserCloud($userid);
            $locationStore = $userCloud->getLocationFile();
            if (! file_exists($locationStore) || ! is_dir($locationStore)) {

            }
            @mkdir($locationStore, 0755, 1);
            if (! file_exists($locationStore)) {
                loi("Can not create folder user1: '$locationStore'");
            }
            if($request->file_path_local_upload_ ?? ''){
                if(
                    str_contains($request->file_path_local_upload_, '../')
                    || str_contains($request->file_path_local_upload_, '/..')
                    || strstr($request->file_path_local_upload_, '\\')
                ){
                    loi("File path not valid");
                }

                $fileTmp = new \stdClass();

                $fileTmpPath = $locationStore ."/". $request->file_path_local_upload_;

                if(file_exists($request->file_path_local_upload_))
                    $fileTmpPath = $request->file_path_local_upload_;

                if (!file_exists($fileTmpPath)) {
                    loi(" ($userid) Fileupload not found:  $fileTmpPath, LCS=$locationStore");
                }

                $sizeTmp = filesize($fileTmpPath);;

                if(!($request->file_name ?? ''))
                    loi("Not file_name upload");
                if(!($request->file_size ?? ''))
                    loi("Not file_size upload");

                if($request->file_size != $sizeTmp)
                    loi("File size not valid: $request->file_size != $sizeTmp");

                $fileTmp->path = $fileTmpPath;
                $fileTmp->name = $request->file_name;
                $fileTmp->size = $sizeTmp;
                $mFile = [$fileTmp];

                $folderId = $request->folder_id ?? 0;

            }
            else{
                //Lấy thông tin file upload:
                $mFile = $request->file_data ?? '';
                if (! $mFile) {
                    loi('Not valid upload (1)?');
                }
            }

            if (! is_array($mFile)) {
                $mFile = [$mFile];
            }

            $mRetMultiUpload = [];

            $mmObj = [];

            $maxFileSizeAllow = \App\Models\SiteMng::getMaxSizeUpload();

            foreach ($mFile as $fileUp) {

                if ($fileUp instanceof UploadedFile);
                if (isDebugIp()) {
                    //                echo "<pre> >>> " . __FILE__ . "(" . __LINE__ . ")<br/>";
                    //                print_r($fileUp);
                    //                echo "</pre>";
                    //                die();

                }

                if($fileUp instanceof \stdClass){
                    $fileName = $fileUp->name;
                    $filePath = $fileUp->path;
                    $fileSize = $fileUp->size;
                }else{
                    $fileName = $fileUp->getClientOriginalName();
                    $filePath = $fileUp->getRealPath();
                    $fileSize = $fileUp->getSize();
                }

                if (! file_exists($filePath)) {
                    loi('Can not found file path upload!');
                }

                if ($fileSize > $maxFileSizeAllow) {
                    loi("Có lỗi upload ($userid) File quá kích thước cho phép : $fileSize > ".ByteSize($maxFileSizeAllow));
                }

                if (! $fileSize || is_dir($filePath)) {
                    loi("Có lỗi upload! Disk Full Or (fileSize = $fileSize) null ");
                }

                //        die("upload.....  $fileName / $filePath/ $fileSize");

                $pr = ['name' => $fileName];
                if($request->f_name_up ?? '')
                    $pr['name'] = $request->f_name_up;

                DB::beginTransaction();

                //Todo: chỗ này file big, md5 sẽ tính lâu, thì có thể đưa vào 1 Job service background ...
                //nếu file dưới 100MB thì mới tính md5: (máy PC cpu 2680 v3, tính md5 file 100MB hết 0.3 giây)
                $md5 = null;
                if (filesize($filePath) < 100 * _MB) {
                    $md5 = md5_file($filePath);
                }

                $fileCloud = new FileCloud();

                $tmp = '';
                $haveOldFileInCloud = 0;
                //Nếu có FileCloud Obj rồi thì
                $fileCloud = FileCloud::where('md5', $md5)->latest()->first();

                $retOldLink = null;

                //Phải kiểm tra file thật, vì có trường hợp sync file có vấn đề

                if ($md5 && $fileCloud && file_exists($fileCloud->file_path) && filesize($fileCloud->file_path) == $fileSize) {

                    //Không tạo fileUser mới trong TH này:
                    //Nếu tìm thấy 1 fileUser có link cloud này, và mới upload trong 24 giờ, thì trả lại file đó luôn:
                    //Tránh trường hợp bị loop upload giống nhau:
//                    if(0)
                    if ($oldUpload = FileUpload::where(['user_id' => $userid, 'name'=> $fileName, 'cloud_id' => $fileCloud->id])->latest()->first()) {
                        if ($oldUpload->created_at > nowyh(time() - 3600)) {
                            if (file_exists($fileCloud->file_path)) {
                                DB::commit();
                                $debug = null;

                                $mmObj[] = $oldUpload;
                                if($oldUpload instanceof FileUpload);

                                $linkX = $oldUpload->getCloudLink();

                                if(!$oldUpload->link1){
                                    $oldUpload->link1 = eth1b($oldUpload->id);
                                    $oldUpload->save();
                                }

                                if(SiteMng::enable4sLink())
                                    $linkX = "/f/".$oldUpload->getLink1();

                                $retOldLink = ['id' => $oldUpload->id, 'name' => $fileName,
                                    'md5'=>$md5,
                                    'link1'=> $oldUpload->getLink1(),
                                    'thumb' => $oldUpload->getCloudLinkImage(),
                                    'link' => $linkX, 'note' => "uploadDone! Upload the same file  (<1h before, $debug), so return old link"];

//                                if(file_exists($filePath))
//                                    unlink($filePath);

                            }
                        }
                    }

                    $haveOldFileInCloud = 1;
                }

                if (! $retOldLink) {
                    //            die("\n\nUIDx1 = $userCloud->user_id / $locationStore / ");

                    //Tạo fileUser mới, vì không có file trong cloud, hoặc có file nhưng quá 24h
                    $objFile = FileUpload::create($pr);
                    $objFile->link1 = eth1b($objFile->id);

                    $newPath = "$locationStore/".gen_path_from_number($objFile->id).'/'.$objFile->id;
                    $newPath = "$locationStore/$objFile->id";
                    $dname = dirname($newPath);
                    if(!file_exists($dname))
                        @mkdir($dname, 0755, 1);
                    if(!file_exists($dname) && !is_dir($dname)){
                        DB::rollBack();
                        loi("Can not create folder: $dname", 500);
                    }

                    if($fileUp instanceof \stdClass){
                        dumpdebug("CheckFileUpload: $filePath -> $newPath");
                        //Nếu là upload local
                        if($request->file_path_local_is_copy_ ?? ''){
                            dumpdebug("LocalCP: $filePath -> $newPath");
                            if (!copy($filePath, $newPath)) {
                                //Hủy lệnh tạo FileUpload
                                DB::rollBack();
                                loi("Can not copy file1: $filePath -> $newPath", 500);
                            }
                        }
                        else {
                            dumpdebug("rename File: $filePath -> $newPath");

                            if (!rename($filePath, $newPath)) {
                                //Hủy lệnh tạo FileUpload
                                DB::rollBack();
                                loi("Can not move file1: $filePath -> $newPath", 500);
                            }
                        }
                    }
                    else{
                        dumpdebug("move_uploaded_file: $filePath -> $newPath");

                        if (! move_uploaded_file($filePath, $newPath)) {
                            //Hủy lệnh tạo FileUpload
                            DB::rollBack();
                            loi("Can not move file2: $filePath -> $newPath", 500);
                        }
                    }


                    if (! file_exists($newPath)) {
                        //Hủy lệnh tạo FileUpload
                        DB::rollBack();

                        loi("Can not move file2: $filePath, $newPath", 500);
                    }

                    $mimeOK = mime_content_type($newPath);

                    //Nếu có file trong cloud:
                    if ($haveOldFileInCloud) {
                        $tmp = 'Have the same file in FileCloud, linked only';
                        $objFile->log = "$tmp : $fileCloud->id , $fileCloud->created_at";
                        //Nếu file đã tồn tại thì xóa file mới up đi
                        if (file_exists($fileCloud->file_path)) {
                            unlink($newPath);
                        }
                        //Todo: nếu có replicate ra chỗ khác, thì sẽ phải xly chỗ này
                        //Nếu fileCloud ko còn tồn tại, thì lấy path mới up lên
                        else {
                            $fileCloud->file_path = $newPath;

                            if ($fileCloud instanceof ModelGlxBase);
                            $fileCloud->update([], [], 0);
                        }
                    } else {
                        $fileCloud = FileCloud::create([
                            'id'=> $objFile->id,
                            'user_id' => $userid,
                            'file_path' => $newPath,
                            'md5' => $md5,
                            'size' => $fileSize,
                            'name' => $fileName,
                            'mime' => $mimeOK,
                        ]);
                        $objFile->addLog('Create new in FileCloud: '.$objFile->id);
                        $fileCloud->id = $objFile->id;
                    }
                    if ($objFile instanceof ModelGlxBase);
                    //Luôn để path
                    $objFile->file_path = $newPath;
                    $objFile->file_size = $fileSize;
                    $objFile->user_id = $userid;
                    $objFile->cloud_id = $fileCloud->id;
                    $objFile->mime = substr($mimeOK,0,100);


                    $pid = $request->set_parent_id ?? 0;
                    $pid = intval($pid);
                    if (!$pid || $pid < 0)
                        $pid = 0;

                    if($request->folder_id ?? '')
                        $pid = $request->folder_id;

                    //Xem PID co phai la folder cua user ko?
                    if($pid)
                    if(!FolderFile::where('id', $pid)->where('user_id', $userid)->first())
                        $pid = 0;

                    $objFile->parent_id = $pid;

                    if ($request->refer ?? '') {
                        $objFile->refer = HTMLPurifierSupport::clean($request->refer);
                    }

                    $objFile->update([], [], 0);

                    if ($objFile instanceof FileUpload);

                    $mmObj[] = $objFile;
                }

                DB::commit();

                if ($retOldLink) {
                    $mRetMultiUpload[] = $retOldLink;
                } else {
                    $linkX = $objFile->getCloudLink();
                    if(SiteMng::enable4sLink())
                        $linkX = "/f/".$objFile->getLink1();
                    $mRetMultiUpload[] = ['id' => $objFile->id, 'name' => $fileName,
                        'thumb' => $objFile->getCloudLinkImage(),
                        'md5' => $md5,
                        'link1'=> $objFile->getLink1(),
                        'link' => $linkX];
                }

            }

            if ($returnObjOnly == 1) {
                return $mmObj;
            }
            if ($returnObjOnly == 2) {
                return $mmObj[0]->id;
            }

            //Bản cũ thì chỉ trả lại 1 file
            if (count($mFile) == 1) {
                return rtJsonApiDone($mRetMultiUpload[0], "uploadDone! $tmp");
            }

            //Nếu up nhiều thì phải trả lại mảng file
            return rtJsonApiDone($mRetMultiUpload, "uploadDone! $tmp");

        } catch (\Throwable $e) { // For PHP 7
            DB::rollBack();
//            if ($returnObjOnly)
            {
                loi($e->getMessage().' / LINE: '.__LINE__.' / Func : '.__FUNCTION__);
            }
//            return rtJsonApiError('Upload error1: '.$e->getMessage().' | LINE: '.$e->getLine());
        }
//        catch (\Exception $e) {
//            DB::rollBack();
//            if ($returnObjOnly) {
//                loi($e->getMessage().' / LINE: '.__LINE__.' / Func : '.__FUNCTION__);
//            }
//
//            return rtJsonApiError('Upload error2: '.$e->getMessage().' | LINE: '.$e->getLine());
//        }

        loi('Upload error3!');
    }

    /**
     * @params file
     *
     * @return \Illuminate\Http\JsonResponse
     *                                       API:
     *
     * @apiParam {BinaryData1} file_data : dữ liệu file upload lên
     * @apiParam {integer} set_parent_id : parent folder of file,  0 default in root folder of user
     *
     * @apiSuccess {code} abc123 : test123
     *
     * @apiExample
    * - Curl upload file example in PHP:
    * $fileUp = "c:/file1.jpg";
    * $cFile = curl_file_create($fileUp);
    * $post = ['file_data'=> $cFile, 'set_parent_id'=> 0 ,'refer'=> 'test123'];
    * $ch = curl_init();
    * $url = 'https://...domain.../api/member-file/upload';
    * curl_setopt($ch, CURLOPT_URL,$url);
    * curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
    * curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    * 'Authorization: Bearer ' . $tk
    * ));
    * $result = curl_exec($ch);
    * $obj = json_decode($result);
    * $error_msg = curl_error($ch);
    * curl_close($ch);
     * //////////////////////////////////////
     *2025:
     * function uploadFile($filePath, $fileName, $refer = null, $tk)
     * {
     * $cFile = curl_file_create($filePath);
     * $post = ['file_data'=> $cFile, 'set_parent_id'=> 0 ,'refer'=> $refer, 'f_name_up'=>$fileName];
     * $ch = curl_init();
     * $url = 'https://v2up.4share.vn/api/member-file/upload';
     * curl_setopt($ch, CURLOPT_URL,$url);
     * curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
     * curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
     * curl_setopt($ch, CURLOPT_HTTPHEADER, array(
     * 'Authorization: Bearer ' . $tk
     * ));
     * $result = curl_exec($ch);
     * $obj = json_decode($result);
     * $error_msg = curl_error($ch);
     * curl_close($ch);
     * return $obj;
     * }
     */
    public function upload(Request $request, $returnObjOnly = 0)
    {
            try{
                return FileUploadControllerApi::uploadStatic((object)($request->toArray()), $returnObjOnly);
            }
            catch (Throwable $e) { // For PHP 7
                return rtJsonApiError($e->getMessage());
//                echo "<br/>\n Error1: ".$e->getMessage();
            }
    }

    /**
     * @return \Illuminate\Http\JsonResponse
     *                                       API:
     *
     * @apiExample
     $ch = curl_init();
    $url = "https://...domain.../api/member-file/list?limit=2&page=2";
    curl_setopt($ch, CURLOPT_URL,$url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Authorization: Bearer ' . $tk
    ));

    $result = curl_exec($ch);
    //$obj = json_decode($result);
    //$error_msg = curl_error($ch);
    curl_close($ch);

    echo "\nRETURN = ";
    print_r(json_decode($result));
     */
    public function list(): \Illuminate\Http\JsonResponse
    {
        return parent::list(); // TODO: Change the autogenerated stub
    }
}
