<?php

namespace App\Models;

use App\Components\Helper1;
use Elasticsearch\Endpoints\Cat\Help;
use LadLib\Common\Database\MetaOfTableInDb;
use LadLib\Common\UrlHelper1;

/**
 * ABC123
 *
 * @param null $objData
 */
class EventInfo_Meta_ok1 extends MetaOfTableInDb
{
    protected static $api_url_admin = '/api/event-info';

    protected static $web_url_admin = '/admin/event-info';

    protected static $api_url_member = '/api/member-event-info';

    protected static $web_url_member = '/member/event-info';

    //    static $eventChanel = 'event-mng-channel';
    public static $eventChanel = 'event001';

    public static $titleMeta = 'Danh mục Sự kiện';

    public static $folderParentClass = EventInfo::class;
    public static $modelClass = EventInfo::class;

    public static $allowAdminShowTree = 1;

    public static $typeEmail = 'email';

    public static $typeSms = 'sms';

    /**
     * @return string
     */
    public static function getApiUrlMember(): string
    {
        return self::$api_url_member;
    }


    public static function getDefaultTemplateId()
    {
        return 6; // TODO: Change the autogenerated stub
    }

    /**
     * @return MetaOfTableInDb
     */
    public function getHardCodeMetaObj($field)
    {
        $objSetDefault = new MetaOfTableInDb();
        $objMeta = new MetaOfTableInDb();

        $objSetDefault->setDefaultMetaTypeField($field);
        $objMeta->dataType = $objSetDefault->dataType;

        if ($field == 'status' || $field == 'require_sign'
            || $field == 'require_sign_this_event'
            || $field == 'user_need_image_to_reg'
        ) {
            $objMeta->dataType = DEF_DATA_TYPE_STATUS;
        }
        if ($field == 'time_start' || $field == 'time_end') {
            $objMeta->dataType = DEF_DATA_TYPE_IS_DATE_TIME;
        }

        if ($field == 'content3' || $field == 'content1' || $field == 'content2' ||
            $field == 'content3_en' || $field == 'content1_en' || $field == 'content2_en'
        ) {
            $objMeta->dataType = DEF_DATA_TYPE_RICH_TEXT;
        }
        if ($field == 'department') {
            $objMeta->dataType = DEF_DATA_TYPE_HTML_SELECT_OPTION;

        }
        if (str_starts_with($field, 'sms_content')) {
            $objMeta->dataType = DEF_DATA_TYPE_TEXT_AREA;
        }

        if (str_starts_with($field, 'reg_mail_0')) {
            $objMeta->dataType = DEF_DATA_TYPE_TEXT_AREA;
        }

        if($field == 'allow_public_reg'){
            $objMeta->dataType = DEF_DATA_TYPE_STATUS;
        }

        if (
            $field == 'attached_files_email1' ||
            $field == 'attached_files_email1_en' ||
            $field == 'attached_files_email2' ||
            $field == 'attached_files_email2_en' ||
            $field == 'attached_files_email3' ||
            $field == 'attached_files_email3_en' ||
            $field == 'files') {
            $objMeta->dataType = DEF_DATA_TYPE_IS_MULTI_IMAGE_BROWSE;
        }

        if ($field == 'image_list') {
            $objMeta->dataType = DEF_DATA_TYPE_IS_MULTI_IMAGE_BROWSE;
        }

        if ($field == 'image_register') {
            $objMeta->dataType = DEF_DATA_TYPE_IS_ONE_IMAGE_BROWSE;
        }

        if ($field == 'tag_list_id') {
            $objMeta->join_api_field = 'name';
            //          $objMeta->join_func = 'joinTags';
            //EventInfo edit, tag sẽ ko update được?
            $objMeta->join_relation_func = 'joinTags';
            $objMeta->join_api = '/api/tags/search';
            $objMeta->dataType = DEF_DATA_TYPE_ARRAY_NUMBER;
        }

        if ($field == 'parent_id' || $field == 'parent2') {
            $objMeta->dataType = DEF_DATA_TYPE_TREE_SELECT;
            $objMeta->join_api = '/api/event-info';
            $objMeta->join_api = '/api/member-event-info';
        }

        return $objMeta;
    }


    public static function getEventChanelName()
    {
        $file = '/var/glx/weblog/event_chanel_name.' . getCurrentUserId();
        //return $file;
        if (file_exists($file)) {
            return trim(file_get_contents($file));
        }

        return 'default_pusher_chanel';
    }


    public function getSqlOrJoinExtraEdit(\Illuminate\Database\Eloquent\Builder &$x = null, $params = null)
    {
        //Kiem tra xem User hien tai co quyen khong:
        if (Helper1::isMemberModule()) {
            $eventId = intval($params['id'] ?? 0);
            //Xem su kien thuoc phong ban nao:
            $event = EventInfo::find($eventId);
            if (!$event) {
                die("Not found event! $eventId");
            }
            $email = getCurrentUserEmail();

            $depId = EventInfo::getDepartmentIdOfUser(getCurrentUserId());
            //Neu su kien khong thuoc phong ban cua User thi bao loi:
            if ($event->department != $depId) {
                die("$email, Dữ liệu không thuộc quyền của bạn (Event: $eventId)!");
            }
        }
    }

    function getSqlOrJoinExtraIndex(\Illuminate\Database\Eloquent\Builder &$x = null, $getSelect = 0)
    {
        if (Helper1::isMemberModule()) {
            $depId = EventInfo::getDepartmentIdOfUser(getCurrentUserId());
            if (!$depId) {
                $depId = -100000;
            }
            //Theem dieu kien deparemtnent_id
            $x->where('department', $depId);
            return;
        }

        return $x->leftJoin('users', 'user_id', '=', 'users.id')
            ->addSelect([
                'users.email AS _email'
            ]);
    }

    public function setDefaultValue($field)
    {
        if ($field == 'status') {
            return 1;
        }
        $domain = UrlHelper1::getDomainHostName();

        if ($field == 'reg_mail_title_vi1') {
            return "Xác nhận đăng ký sự kiện: [EVENT_NAME]";
        }
        if ($field == 'reg_mail_title_vi2') {
            return "Đăng ký thành công sự kiện: [EVENT_NAME]";
        }

        if ($field == 'reg_mail_title_en1') {
            return "Event registration confirmation: [EVENT_NAME]";
        }
        if ($field == 'reg_mail_title_en2') {
            return "Event registration successful: [EVENT_NAME]";
        }

        if ($field == 'reg_mail_01_vi') {
            return "Xin chào [USER_NAME],
Quý vị đã đăng ký sự kiện: [EVENT_NAME]
Xin mời click vào link sau để xác nhận thông tin:
[CONFIRM_EMAIL]
Xin cảm ơn!
-------------
Mọi thông tin xin liên hệ:
https://$domain";
        }

        if ($field == 'reg_mail_02_vi') {
            return "Xin chào [USER_NAME],
Quý vị đã được duyệt đăng ký vào sự kiện: [EVENT_NAME]
Vui lòng sử dụng  mã QRCODE sau khi tham gia Sự kiện:
[QRCODE]
Xin cảm ơn Quý vị!
-------------
Mọi thông tin xin liên hệ:
https://$domain";
        }

        if ($field == 'reg_mail_01_en') {
            return "Dear Nguyen van Anh,
You are registering for event: [EVENT_NAME]
Please click the link below to confirm your registration:
[CONFIRM_EMAIL]
(Or copy and paste the link into your browser)
Thank and best regards!
-------------
For more information, please visit:
https://$domain";
        }

        if ($field == 'reg_mail_02_en') {
            return "Dear [USER_NAME],
You are approved for event: [EVENT_NAME]
Please use the following QR code to Check-in.
[QRCODE]
We will contact you soon.
Thank and best regards!
-------------
For more information, please visit:
https://$domain";
        }


    }

    public static function getIdReadOnlyIfNotSupperAdmin()
    {
        return 6;
    }

    function _image_list($obj, $val, $field)
    {
        return Helper1::imageShow1($obj, $val, $field);
    }

    static function htmlDivSubEventAdmin($ev1) {

        $strFullTIme = \App\Models\EventInfo::getStrTimeStartEnd($ev1);

        $padPublic = '';
        if(!$ev1->allow_public_reg){
            $padPublic = "  <div style='color: brown; font-style: italic'>Không mở Đăng ký Public</div>";
        }

        $loc = '';
        if($ev1->location)
            $loc = " | $ev1->location";
        return "<div class='sub_event_info' data-id='$ev1->id'>
 <i title='Gỡ sự kiện con này ra khỏi sự kiện cha' data-id='$ev1->id' class='fa fa-times remove_ev'
 style='float:right;color: red'> </i>
<a target='_blank' href='/admin/event-info/edit/$ev1->id'>
<b> $ev1->id. $ev1->name </b>
</a>
<br>
$strFullTIme  $loc $padPublic
</div>";
    }

    function _sub_event_list($obj, $val, $field)
    {

        $mt = new EventRegister_Meta();
        $mt->extraCssIncludeEdit();
        $ret = "";

        $str = '';
//        $str = EventInfo::htmlSubEventInputCheck($obj, null);

        $str .= "<div class='sub_event_zone'>";
        $mm = EventInfo::where('parent_id', $obj->id)->get();
        if(count($mm)){
            foreach ($mm AS $ev1){
                $str .= static::htmlDivSubEventAdmin($ev1);
            }
        }
        $str .= "</div>";


        $ret .= "
        <div id='dynamic-select-container_child_$obj->id' class='select_to_add mb-3 mt-2' data-code-pos='ppp173059221'
        style=''>
            <select id='dynamic-select_child_$obj->id' placeholder='Choose an option...' data-code-pos='ppp160597431'>
                <option value='0' selected> --- Chọn Sự kiện con để thêm vào ---</option> <!-- Title ban đầu -->
            </select>
        </div>";

        if($str)
        $ret .= "
        <div class='sub_event_list m-0' style='border: 0px solid #ccc; padding: 0px; width: 100%' data-code-pos='ppp17356026024341'>
$str

        </div>";

//        $ret .="<A HREF='/admin/event-info' target='_blank' class=''>
//        <button type='button' class='btn btn-primary btn-sm m-2 mx-1' > THÊM SỰ KIỆN CON</button>
//        </A>
//        ";


        return $ret;
    }


    function _user_id($obj, $val)
    {
        $user = User::find($val);
        if ($user) {
            return " <div style='font-size: small; padding: 3px 10px'> $user->email </div> ";
        }
    }


    public function getFullSearchJoinField()
    {
        return ['event_infos.name'  => "like", 'location'  => "like", 'users.email'  => "like"]; // TODO: Change the autogenerated stub
    }

    public function _attached_files_email1($obj, $val, $field)
    {
        return Helper1::imageShow1($obj, $val, $field);
    }

    function _image_register($obj, $val, $field)
    {
        return Helper1::imageShow1($obj, $val, $field);
    }

    //...


    function _department($obj, $value, $field)
    {
        $m1 = Department::select(['id', 'name'])->get()->toArray();

        $mm = [];
        $mm[0] = '--- Chọn Đơn vị ---';
        foreach ($m1 as $v1) {
            $mm[$v1['id']] = $v1['name'];
        }
//        echo "<pre> >>> " . __FILE__ . "(" . __LINE__ . ")<br/>";
//        print_r($mm);
//        echo "</pre>";

//        echo "<pre> >>> " . __FILE__ . "(" . __LINE__ . ")<br/>";
//        print_r($mm);
//        echo "</pre>";

        //Nếu có obj có thì mới trả lại Key=>id
        //Nếu ko, nghĩa là trường hợp Get all để chọn
        if ($obj) {
            if (isset($mm[$value]) && $value) {
                return [$value => $mm[$value]];
            } else {
                return null;
            }
        }

        return $mm;

    }

    public function _attached_files_email1_en($obj, $val, $field)
    {
        return Helper1::imageShow1($obj, $val, $field);
    }

    public function _attached_files_email2($obj, $val, $field)
    {
        return Helper1::imageShow1($obj, $val, $field);
    }

    public function _attached_files_email2_en($obj, $val, $field)
    {
        return Helper1::imageShow1($obj, $val, $field);
    }

    public function _attached_files_email3($obj, $val, $field)
    {
        return Helper1::imageShow1($obj, $val, $field);
    }

    public function _attached_files_email3_en($obj, $val, $field)
    {
        return Helper1::imageShow1($obj, $val, $field);
    }

    public function _files($obj, $val, $field)
    {
        return Helper1::imageShow1($obj, $val, $field);
    }

    public function extraContentIndex1($v1 = null, $v2 = null, $v3 = null)
    {
        ?>


        <?php

    }

    public function extraContentIndex2($v1 = null, $v2 = null, $v3 = null)
    {
        ?>

        <style>



            .input_value_to_post.name {
                /*display: none;*/
                font-weight: bold;
                color: dodgerblue;
            }

            ol.breadcrumb input, ol.breadcrumb a, ol.breadcrumb button {
                padding: 0;
                margin: 0;
                border: 0;
                line-height: 1;
                font-size: 16px;
            }
        </style>

        <div style=' float: right; display: none; margin-top: 1px; border: 0px solid red ' class="mr-2">

            <!--            <i class="fa fa-cog">-->
            <!---->
            <!--            </i>-->

            <input title="Chanel Name trùng tên với trên App gửi SMS" id="chanel_name" type='text'
                   value="<?php echo EventInfo_Meta_ok1::getEventChanelName() ?>"
                   placeholder="Chanel name" class='form-control-sm'
                   style='vertical-align: bottom; display: inline-block; margin: 0px; min-height: 25px!important; height: 22px; padding: 1px 8px; color: gray; width: 100px; border: 1px solid #ccc'>


            <button type="button" id="btn_chanel_save" class=""
                    style='vertical-align: bottom; display: inline-block; border: 1px solid #ccc; font-size : smaller; padding: 5px'
                    title="Save chanel name">Save
            </button>


        </div>

        <?php
    }

    public function extraHtmlIncludeEdit1()
    {

        ?>

        <style>
            .choices__list {
                z-index: 10000000;
            }
            .btn_open_dialog_tree[data-field="parent_id"] {
                display: none;
            }
            .action_zone1
            {
                background-color: #f8f9fa ; height: 40px; margin: -20px -15px 15px -15px;border-radius: 5px 5px 0px 0px;
                text-align: left; display: flex; align-items: center; font-size: 110%; font-weight: bold; color: royalblue; padding-left: 15px;
                border-bottom: 1px solid #ccc;
            }
            .action_zone2
            {
                background-color: #f8f9fa; height: 40px; margin: 15px -15px 12px -15px;border-radius: 0px 0px;
                display: flex; align-items: center; font-size: 110%; font-weight: bold; color: royalblue;
                border-top: 1px solid #ccc;
                border-bottom: 1px solid #ccc;
                padding-left: 15px;
            }
        </style>


        <?php
        $this->extraCssInclude();
        $em = SiteMng::getInstance()->admin_email;
        $phone = SiteMng::getInstance()->admin_email;

        $idf = request('id');
        $meta = EventInfo::getMetaObj();
        if ($meta instanceof MetaOfTableInDb) ;
        $mmMeta = ($meta->getMetaDataApi());
        $slContMail = "<select class='select_type select_mail_content' data-ev-id='$idf'>";
        foreach ($mmMeta as $fieldName => $tmp) {
            if (str_ends_with($fieldName, 'en'))
                continue;
            if (str_starts_with($fieldName, 'content')) {
                $d1 = $meta->getDescOfField($fieldName);
                $slContMail .= " <option value='$fieldName'> $d1 </option>";
            }
        }
        $slContMail .= "</select>";

//        echo "<div class='mt-3 send_test_div'>
//<div class=''>
//$slContMail
// <input type='text' value='$em'>
//<button class='btn btn-info btn-sm ' id='send_mail_test'> Gửi thử Email Admin: </button>
//<br>
// <input placeholder='Nhap so phone...' type='text' value=''>
// <button class='btn btn-info btn-sm '> Gửi thử Sms: </button>
//</div>
//</div>";

    }


    function afterInsertApi($obj, $get = null, $post = null)
    {
        //Gan Department ID cho Event
        $obj->department = EventInfo::getDepartmentIdOfUser(getCurrentUserId());
        $obj->addLog("Tạo mới sự kiện, gán Department auto theo thong tin Phòng ban của user");
        $obj->save();

    }


    public function extraJsIncludeEdit($objData = null)
    {
//
//        $this->extraJsInclude();
        $mt = new EventRegister_Meta();
        $mt->extraJsIncludeEdit();

        ?>

        <script>


            // Function to build HTML table from user data
            function buildHtmlTable(data) {
                // Extract unique organizations for dropdown
                const uniqueOrganizations = [];
                data.forEach(user => {
                    if (user.organization && !uniqueOrganizations.includes(user.organization)) {
                        uniqueOrganizations.push(user.organization);
                    }
                });
                // Sort organizations alphabetically
                uniqueOrganizations.sort();

                // Create organization dropdown options
                let orgOptions = `<option value="all"> - Đơn vị - </option>`;
                uniqueOrganizations.forEach(org => {
                    orgOptions += `<option value="${org}">${org}</option>`;
                });

                // Extract unique groups for dropdown
                const uniqueGroups = [];
                data.forEach(user => {
                    if (user.parent_name && !uniqueGroups.includes(user.parent_name)) {
                        uniqueGroups.push(user.parent_name);
                    }
                });
                // Sort groups alphabetically
                uniqueGroups.sort();

                // Create group dropdown options
                let groupOptions = `<option value="all"> - Nhóm - </option>`;
                uniqueGroups.forEach(group => {
                    groupOptions += `<option value="${group}">${group}</option>`;
                });

                // Create the HTML table template string
                let tableHtml = `
<table class="table table-bordered table-striped">
  <thead class="">
    <tr>
      <th scope="col">#</th>
      <th scope="col">
      <input type="text" placeholder="Họ tên" class="form-control form-control-sm name_select">
      </th>
      <th scope="col">
      <input type="text" placeholder="Email" class="form-control form-control-sm email_select">
      </th>
      <th scope="col">
<input type="text" placeholder="Số phone" class="form-control form-control-sm phone_select">
</th>
      <th scope="col" style="max-width: 150px">
      <select class="form-control form-control-sm org-filter">
        ${orgOptions}
      </select>
      </th>
      <th scope="col">
      <select class="form-control form-control-sm group-filter">
        ${groupOptions}
      </select>
      </th>
      <th scope="col" style="text-align: center; width: 100px">
      <input type="text" placeholder="Ghi chú" class="form-control form-control-sm note_select">

      </th>
      <th scope="col" style="text-align: center; width: 100px">
      <select class="form-control form-control-sm confirm_join_at">
            <option value="">-Xác nhận</option>
            <option value="1">Đã xác nhận</option>
            <option value="0">Chưa xác nhận</option>
      </select>

      </th>
      <th scope="col" style="text-align: center; width: 100px">
          <select class="form-control form-control-sm deny_join_at">
                <option value="">-Từ chối</option>
                <option value="1">Đã từ chối</option>
                <option value="0">Chưa từ chối</option>
          </select>
      </th>
      <th scope="col" style="text-align: center; width: 100px">
          <select class="form-control form-control-sm attend_at">
                <option value="">-CheckIn</option>
                <option value="1">Đã CheckIn</option>
                <option value="0">Chưa CheckIn</option>
          </select>
      </th>
    </tr>
  </thead>
  <tbody>`;

                // Process data array and add rows
                data.forEach((user, index) => {
                    tableHtml += `
    <tr class="user-row" data-organization="${user.organization || ''}" data-group="${user.parent_name || ''}">
      <td>${index + 1}</td>
      <td>${user.name || ''}</td>
      <td>${user.email || ''}</td>
      <td>${user.phone || ''}</td>
      <td>${user.organization || ''}</td>
      <td>${user.parent_name || ''}</td>
      <td>${user.note_u || user.note_eau || ''}</td>
      <td style="text-align: center">${user.confirm_join_at ? '✔' : ''}</td>
      <td style="text-align: center">${user.deny_join_at ? '✔' : ''}</td>
      <td style="text-align: center">${user.attend_at ? '✔️' : ''}</td>
    </tr>`;
                });

                // Close the table
                tableHtml += `
  </tbody>
</table>`;

                return tableHtml;
            }



            // Helper function to format date
            function formatDate(dateString) {
                if (!dateString) return '';

                const date = new Date(dateString);

                // Check if date is valid
                if (isNaN(date.getTime())) return dateString;

                // Format as DD/MM/YYYY HH:MM
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');

                return `${day}/${month}/${year} ${hours}:${minutes}`;
            }


            document.addEventListener('DOMContentLoaded', () => {
                // Thêm các style để modal luôn hiển thị ở vị trí cố định
                const modalStyle = document.createElement('style');
                modalStyle.innerHTML = `
                    #exampleModalCenter {
                        padding: 0 !important;
                    }

                    #exampleModalCenter .modal-dialog {
                        position: fixed !important;
                        top: 50% !important;
                        left: 50% !important;
                        transform: translate(-50%, -50%) !important;
                        margin: 0 !important;
                        max-height: 90vh;
                        width: 90%;
                        max-width: 1200px;
                    }

                    #exampleModalCenter .modal-content {
                        height: 85vh;
                        max-height: 85vh;
                        display: flex;
                        flex-direction: column;
                    }

                    #exampleModalCenter .modal-header,
                    #exampleModalCenter .modal-footer {
                        flex-shrink: 0;
                    }

                    #exampleModalCenter .modal-body {
                        overflow-y: auto;
                        flex-grow: 1;
                    }

                    /* Đảm bảo thanh cuộn chỉ xuất hiện khi cần thiết */
                    #exampleModalCenter .table-responsive {
                        overflow-y: auto;
                        max-height: 100%;
                    }
                `;
                document.head.appendChild(modalStyle);

                // Xử lý sự kiện khi modal mở
                const modal = document.getElementById('exampleModalCenter');
                if (modal) {
                    // Khi modal hiển thị
                    modal.addEventListener('show.bs.modal', function() {
                        document.body.classList.add('modal-open');

                        // Tạo một observer để theo dõi thay đổi của content trong modal
                        const observer = new MutationObserver(() => {
                            // Mỗi khi nội dung modal thay đổi, đảm bảo modal vẫn ở vị trí giữa
                            const modalDialog = modal.querySelector('.modal-dialog');
                            if (modalDialog) {
                                modalDialog.style.position = 'fixed';
                                modalDialog.style.top = '50%';
                                modalDialog.style.left = '50%';
                                modalDialog.style.transform = 'translate(-50%, -50%)';
                            }
                        });

                        // Theo dõi thay đổi trong modal-body
                        const modalBody = modal.querySelector('.modal-body');
                        if (modalBody) {
                            observer.observe(modalBody, {
                                childList: true,
                                subtree: true,
                                characterData: true,
                                attributes: true
                            });
                        }
                    });

                    // Khi modal đóng
                    modal.addEventListener('hidden.bs.modal', function() {
                        document.body.classList.remove('modal-open');
                    });
                }
            });


            document.addEventListener('DOMContentLoaded', () => {
                document.getElementById('exampleModalCenter').addEventListener('show.bs.modal', function (event) {
                    // Make an AJAX request to fetch content from the API
                    fetch('/api/event-info/getUserListEvent?eid=<?php echo $objData->id ?>')
                        .then(response => response.json())
                        .then(data => {
                            console.log("Get data...", data.payload);

                            // Generate the HTML table
                            const htmlTable = buildHtmlTable(data.payload);

                            // Populate the modal body with the fetched content
                            document.querySelector('#exampleModalCenter .modal-body .user_list').innerHTML = htmlTable;

                            // Thêm event listener sau khi nội dung HTML đã được thêm vào DOM
                            setTimeout(function() {
                                // Xử lý lọc theo tổ chức
                                const orgFilter = document.querySelector('.org-filter');
                                if (orgFilter) {
                                    orgFilter.addEventListener('change', function() {
                                        filterUserRows();
                                    });
                                } else {
                                    console.error('Cannot find .org-filter element');
                                }

                                // Xử lý lọc theo nhóm
                                const groupFilter = document.querySelector('.group-filter');
                                if (groupFilter) {
                                    groupFilter.addEventListener('change', function() {
                                        filterUserRows();
                                    });
                                } else {
                                    console.error('Cannot find .group-filter element');
                                }

                                // Xử lý lọc theo số điện thoại
                                const phoneFilter = document.querySelector('.phone_select');
                                if (phoneFilter) {
                                    phoneFilter.addEventListener('keyup', function() {
                                        filterUserRows();
                                    });
                                } else {
                                    console.error('Cannot find .phone_select element');
                                }

                                // Xử lý lọc theo tên
                                const nameFilter = document.querySelector('.name_select');
                                if (nameFilter) {
                                    nameFilter.addEventListener('keyup', function() {
                                        filterUserRows();
                                    });
                                } else {
                                    console.error('Cannot find .name_select element');
                                }

                                // Xử lý lọc theo email
                                const emailFilter = document.querySelector('.email_select');
                                if (emailFilter) {
                                    emailFilter.addEventListener('keyup', function() {
                                        filterUserRows();
                                    });
                                } else {
                                    console.error('Cannot find .email_select element');
                                }

                                // Xử lý lọc theo ghi chú
                                const noteFilter = document.querySelector('.note_select');
                                if (noteFilter) {
                                    noteFilter.addEventListener('keyup', function() {
                                        filterUserRows();
                                    });
                                } else {
                                    console.error('Cannot find .note_select element');
                                }

                            }, 100); // Đợi 100ms để đảm bảo DOM đã được cập nhật
                        })
                        .catch(error => console.error('Error fetching content:', error));
                });

                // Hàm lọc dữ liệu kết hợp tổ chức, nhóm, số điện thoại, tên, email và ghi chú
                function filterUserRows() {
                    const orgFilter = document.querySelector('.org-filter');
                    const groupFilter = document.querySelector('.group-filter');
                    const phoneFilter = document.querySelector('.phone_select');
                    const nameFilter = document.querySelector('.name_select');
                    const emailFilter = document.querySelector('.email_select');
                    const noteFilter = document.querySelector('.note_select');

                    const selectedOrg = orgFilter ? orgFilter.value : 'all';
                    const selectedGroup = groupFilter ? groupFilter.value : 'all';
                    const phoneText = phoneFilter ? phoneFilter.value.trim().toLowerCase() : '';
                    const nameText = nameFilter ? nameFilter.value.trim().toLowerCase() : '';
                    const emailText = emailFilter ? emailFilter.value.trim().toLowerCase() : '';
                    const noteText = noteFilter ? noteFilter.value.trim().toLowerCase() : '';

                    const rows = document.querySelectorAll('.user-row');

                    rows.forEach(row => {
                        const rowOrg = row.getAttribute('data-organization');
                        const rowGroup = row.getAttribute('data-group');
                        const phoneCell = row.querySelector('td:nth-child(4)');
                        const nameCell = row.querySelector('td:nth-child(2)');
                        const emailCell = row.querySelector('td:nth-child(3)');
                        const noteCell = row.querySelector('td:nth-child(7)'); // Cột ghi chú là cột thứ 7

                        const phoneValue = phoneCell ? phoneCell.textContent.toLowerCase() : '';
                        const nameValue = nameCell ? nameCell.textContent.toLowerCase() : '';
                        const emailValue = emailCell ? emailCell.textContent.toLowerCase() : '';
                        const noteValue = noteCell ? noteCell.textContent.toLowerCase() : '';

                        const matchesOrg = selectedOrg === 'all' || rowOrg === selectedOrg;
                        const matchesGroup = selectedGroup === 'all' || rowGroup === selectedGroup;
                        const matchesPhone = !phoneText || phoneValue.includes(phoneText);
                        const matchesName = !nameText || nameValue.includes(nameText);
                        const matchesEmail = !emailText || emailValue.includes(emailText);
                        const matchesNote = !noteText || noteValue.includes(noteText);

                        if (matchesOrg && matchesGroup && matchesPhone && matchesName && matchesEmail && matchesNote) {
                            row.style.display = ''; // Hiển thị hàng
                        } else {
                            row.style.display = 'none'; // Ẩn hàng
                        }
                    });
                }
            });

            document.querySelector('.sub_event_zone').addEventListener('click', function (event) {
                if (event.target.classList.contains('remove_ev'))
                {
                //
                let id = event.target.getAttribute("data-id");
                // let id = $(this).prop("data-id");
                console.log("Remove id = ", id);
                let url = "/api/event-info/removeSubEvent";
                let user_token = jctool.getCookie('_tglx863516839');
                showWaittingIcon();
                $.ajax({
                    url: url,
                    type: 'POST',
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader
                    },
                    data: {sub_id: id},
                    success: function (data, status) {
                        hideWaittingIcon();
                        console.log("Data ret2: ", data, " \nStatus: ", status);
                        if (data.code) {
                            showToastInfoTop(data.payload);

                            //Remove div
                            $(".sub_event_info[data-id='" + id + "']").remove();

                        } else {
                            alert("Có lỗi: " + JSON.stringify(data))
                        }
                        console.log("Data: ", data, " \nStatus: ", status);
                    },
                    error: function (data) {
                        hideWaittingIcon();
                        console.log(" DATAx ", data);
                        if (data.responseJSON && data.responseJSON.message)
                            alert('Error call api: ' + "\n" + data.responseJSON.message)
                        else
                            alert('Error call api: ' + "\n" + url + "\n\n" + JSON.stringify(data).substr(0, 1000));
                    }

                });

            }

            })
        </script>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const selectElement = document.getElementById('dynamic-select_child_<?php echo $objData->id ?>');
                const choices_sub_event = new Choices(selectElement, {
                    shouldSort: false,
                    searchEnabled: true,
                    removeItemButton: true,
                    placeholder: true,
                    itemSelectText: 'Select',
                });

                const defaultValue = <?php  echo $objData->parent_id ?? 0 ?>; // Replace with the actual default value

                fetch('<?php echo Helper1::isMemberModule() ? '/api/member-event-info/list?soby_s1=desc&limit=30' : '/api/event-info/list?soby_s1=desc&limit=30'; ?>')
                    .then(response => response.json())
                    .then(data => {
                        if (data.code === 1 && data.payload?.data) {
                            const options = data.payload.data.map(item => ({
                                value: item.id,
                                label: "(" + item.id + ") " + item.name,
                            }));
                            choices_sub_event.setChoices(options, 'value', 'label', true);
                            // choices_sub_event.setChoiceByValue(defaultValue); // Set the default selected option
                        } else {
                            console.error('Invalid API response:', data);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                    });

                selectElement.addEventListener('choice', function(event) {
                    let val = event.detail.value;
                    console.log('--- Option selected Child:', val);

                    //Lấy thông tin html sub event
                    let url = "/api/event-info/addSubEventAndGetHtml";
                    let user_token = jctool.getCookie('_tglx863516839');
                    showWaittingIcon();
                    $.ajax({
                        url: url,
                        type: 'POST',
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader
                        },
                        data: {parent_id: '<?php echo $objData->id ?>' , sub_id: val},
                        success: function (data, status) {
                            hideWaittingIcon();
                            console.log("Data ret2: ", data, " \nStatus: ", status);
                            if (data.code) {

                                showToastInfoTop(data.message);

                                let sub_event_zone = document.querySelector(".sub_event_zone");
                                // sub_event_zone.insertAdjacentHTML("beforeend", data.payload);
                                sub_event_zone.insertAdjacentHTML("afterbegin", data.payload);


                                //Sau khi add xong, reset lai select
                                // After adding the new option, reset the select element to the first option
                                choices_sub_event.setChoiceByValue('0');


                            } else {
                                alert("Có lỗi: " + JSON.stringify(data))
                            }
                            console.log("Data: ", data, " \nStatus: ", status);
                        },
                        error: function (data) {
                            hideWaittingIcon();
                            console.log(" DATAx ", data);
                            if (data.responseJSON && data.responseJSON.message)
                                alert('Error call api: ' + "\n" + data.responseJSON.message)
                            else
                                alert('Error call api: ' + "\n" + url + "\n\n" + JSON.stringify(data).substr(0, 1000));
                        }

                    });


                    // document.querySelector("input.input_value_to_post[data-field='parent_id']").value = val;
                });
            });
        </script>


        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const selectElement = document.getElementById('dynamic-select_<?php echo $objData->id ?>');
                const choices = new Choices(selectElement, {
                    shouldSort: false,
                    searchEnabled: true,
                    removeItemButton: true,
                    placeholder: true,
                    itemSelectText: 'Select',
                });

                const defaultValue = <?php  echo $objData->parent_id ?? 0 ?>; // Replace with the actual default value

                fetch('<?php echo Helper1::isMemberModule() ? '/api/member-event-info/list?soby_s1=desc&limit=30' : '/api/event-info/list?soby_s1=desc&limit=30'; ?>')
                    .then(response => response.json())
                    .then(data => {
                        if (data.code === 1 && data.payload?.data) {
                            const options = data.payload.data.map(item => ({
                                value: item.id,
                                label: "(" + item.id + ") " + item.name,
                            }));
                            choices.setChoices(options, 'value', 'label', true);
                            choices.setChoiceByValue(defaultValue); // Set the default selected option
                        } else {
                            console.error('Invalid API response:', data);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching data:', error);
                    });

                selectElement.addEventListener('choice', function(event) {
                    let val = event.detail.value;
                    console.log('--- Option selected:', val);



                    document.querySelector("input.input_value_to_post[data-field='parent_id']").value = val;
                });
            });
        </script>



        <script src="https://js.pusher.com/7.0/pusher.min.js"></script>
        <script>

            $("#btn_chanel_save").on("click", function () {
                let chanel_name = $("#chanel_name").val();
                console.log(" VAL = ", chanel_name);
                let user_token = jctool.getCookie('_tglx863516839');
                let url = "/api/event-info/saveEventChannel";
                showWaittingIcon();
                $.ajax({
                    url: url,
                    type: 'POST',
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + user_token);
                    },
                    data: {chanel_name: chanel_name},
                    success: function (data, status) {
                        hideWaittingIcon();
                        console.log("Data ret2: ", data, " \nStatus: ", status);
                        if (data.code) {
                            showToastInfoTop(data.payload)
                        } else {
                            alert("Có lỗi: " + JSON.stringify(data))
                        }
                        console.log("Data: ", data, " \nStatus: ", status);
                    },
                    error: function (data) {
                        hideWaittingIcon();
                        console.log(" DATAx ", data);
                        if (data.responseJSON && data.responseJSON.message)
                            alert('Error call api: ' + "\n" + data.responseJSON.message)
                        else
                            alert('Error call api: ' + "\n" + url + "\n\n" + JSON.stringify(data).substr(0, 1000));
                    }
                });
            })

            // Enable pusher logging - don't include this in production
            Pusher.logToConsole = true;
            var pusher = new Pusher('e2d3c27e21727e9f9804', {
                cluster: 'ap1'
            });
            var channel = pusher.subscribe("<?php echo EventInfo_Meta_ok1::getEventChanelName() ?>");
            channel.bind('my-event-pusher-web-<?php echo $objData->id ?? '' ?>', function (data) {
                //alert(JSON.stringify(data));
                console.log("Data = ", data);

                // document.getElementById('cont').insertAdjacentHTML("afterend","<br> Add text: " + data.message);
                document.getElementById('event_send_status_' + data.event_id).innerHTML = data.message;
            });
        </script>

        <script>
            $(".sync_sms").on('click', function () {
                let evid = $(this).attr("data-ev-id");
                console.log("sync_sms tin ...", evid);
                // return;
                let user_token = jctool.getCookie('_tglx863516839');
                let url = "/api/event-info/syncSms?cmd=sync_sms_request&evid=" + evid;
                showWaittingIcon();
                $.ajax({
                    url: url,
                    type: 'GET',
                    async: false,
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + user_token);
                    },
                    success: function (data, status) {
                        hideWaittingIcon();
                        console.log("Data ret3: ", data, " \nStatus: ", status);
                        if (data.code) {
                            showToastInfoTop(data.payload)
                        } else {
                            alert("Có lỗi: " + JSON.stringify(data))
                        }
                    },
                    error: function (data) {
                        hideWaittingIcon();
                        console.log(" DATAx ", data);
                        if (data.responseJSON && data.responseJSON.message)
                            alert('Error call api: ' + "\n" + data.responseJSON.message)
                        else
                            alert('Error call api: ' + "\n" + url + "\n\n" + JSON.stringify(data).substr(0, 1000));
                    }
                });
            })


            $(".select_user_type").on('change', function () {
                console.log(" VAL = ", $(this).val());
                if ($(this).val() == 'only_list_user') {
                    console.log(" Val = only_list_user");


                }
            })



            $(".send_tin").on('click', function () {
                console.log("Send tin ...");


                clsTableMngJs.saveOneDataTable(true, false);


                let event_id = $(this).parents('.action_event').data('id');

                let typeX = '';
                let select_user_type = $('.select_user_type[data-ev-id=' + event_id + ']').val();
                ;


                console.log("select_user_type = ", select_user_type);

                //only_list_user

                let select_content = '';
                if ($(this).hasClass("email")) {
                    typeX = 'email';
                    select_content = $('.select_mail_content[data-ev-id=' + event_id + ']').val();
                }
                if ($(this).hasClass("sms")) {
                    typeX = 'sms';
                    select_content = $('.select_sms_content[data-ev-id=' + event_id + ']').val();
                }

                let user_email_send_override = '';
                //if($(".select_user_type").val() == 'only_list_user')
                {
                    user_email_send_override = $("#user_email_send_override").val();
                }

                if (user_email_send_override) {
                    if (!confirm("Bạn sẽ gửi mail cho danh sách sau:\n" + user_email_send_override)) {
                        return;
                    }
                }

                console.log(" select_mail_content Type = ", select_content);
                let contentVi = '';
                let contentEn = '';
                let typeCont = '';
                if (select_content.startsWith('sms_content')) {

                    if (!confirm(`** Chú ý: Gửi SMS cần đề phòng gửi nhiều tin trùng lặp, tốn chi phí, và có thể coi là SPAM và bị chặn ...
- Lệnh gửi trên web sẽ đưa các tin nhắn vào hàng đợi, và sẽ chờ được gửi từ App trên Android
- Mở App "PlanEd - SMS Gateway" trên Android, đăng nhập tài khoản của bạn (là Tài khoản đang quản trị Sự kiện này), Bấm nút Gửi SMS ... như trên giao diện của App
- Nên gửi thử 1 vài tin thành công trước khi gửi nhiều tin, và luôn mở App để theo dõi quá trình gửi trên App.
 `)) {
                        return;
                    }

                    typeCont = "SMS";
//Kiem tra xem content Rong thi bao loi:
                    //let content = tinymce.get(this.id).getContent()
                    let idContVi = "edit_text_area_" + select_content;
                    let idConEn = "edit_text_area_" + select_content + "_en";
                    contentVi = document.getElementById(idContVi).value;
                    contentEn = document.getElementById(idConEn).value;

                } else {
                    typeCont = "Mail";
                    //Kiem tra xem content Rong thi bao loi:
                    //let content = tinymce.get(this.id).getContent()
                    let idContVi = "edit_rich_text_" + select_content;
                    let idConEn = "edit_rich_text_" + select_content + "_en";
                    contentVi = tinymce.get(idContVi)?.getContent();
                    contentEn = tinymce.get(idConEn)?.getContent();
                }

                console.log(" contentVi = ", contentVi);
                console.log(" contentEn = ", contentEn);

                if (contentEn.length == 0 && contentVi.length == 0) {
                    alert(`Có lỗi:\nChưa có Nội dung ${typeCont} ${select_content} Tiếng Anh và Việt, Bạn hãy nhập nội dung trước khi gửi!`);
                    return;
                }
                if (contentEn.length == 0 && contentVi.length > 0) {
                    if (!confirm(`* Cảnh báo *\nNội dung ${typeCont} ${select_content} Tiếng Việt đã có và sẽ gửi đi
nhưng Chưa có Nội dung ${typeCont} ${select_content} Tiếng Anh dành cho các User Tiếng Anh
Việc gửi với nội dung chưa có này sẽ bị bỏ qua!
\nBấm OK để vẫn thực hiện gửi nội dung Tiếng Việt cho các user Tiếng Việt, và bỏ qua nội dung với các User Tiếng Anh?`)) {
                        return;
                    }
                }
                if (contentVi.length == 0 && contentEn.length > 0) {
                    if (!confirm(`* Cảnh báo *\nNội dung ${typeCont} ${select_content} Tiếng Anh đã có và sẽ gửi đi
nhưng Chưa có Nội dung ${typeCont} ${select_content} Tiếng Việt dành cho các User Tiếng Việt,
Việc gửi với nội dung chưa có này sẽ bị bỏ qua!
\nBấm OK để vẫn thực hiện gửi nội dung Tiếng Anh cho các user Tiếng Anh, và bỏ qua nội dung với các User Tiếng Việt?`)) {
                        return;
                    }
                }


                let user_token = jctool.getCookie('_tglx863516839');

                let url = "/api/event-info/sendTinAll";
                let dataPost = {
                    event_id: event_id,
                    typeX: typeX,
                    select_content: select_content,
                    user_email_send_override: user_email_send_override,
                    select_user_type: select_user_type
                };
                console.log("Data send: ", dataPost);

                // alert(" Bạn đợi ít phút và click lại!");
                // return;

                $.ajax({
                    url: url,
                    type: 'POST',
                    data: dataPost,
                    async: false,
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + user_token);
                    },
                    success: function (data, status) {
                        hideWaittingIcon();
                        console.log("Data ret4: ", data, " \nStatus: ", status);

                        if (data.payload == -1) {
                            if (confirm("Lệnh Gửi tin tương tự đã được thực hiện và đã đánh dấu hoàn thành trước đây, bạn muốn gửi lại không?\n\n" +
                                "- Chú ý: Việc này có thể sẽ GỬI LẠI cho các user đã nhận tin rồi.")) {
                                dataPost.force_send = 1;
                                $.ajax({
                                    url: url,
                                    type: 'POST',
                                    data: dataPost,
                                    async: false,
                                    beforeSend: function (xhr) {
                                        xhr.setRequestHeader('Authorization', 'Bearer ' + user_token);
                                    },
                                    success: function (data, status) {
                                        hideWaittingIcon();
                                        console.log("Data ret5: ", data, " \nStatus: ", status);

                                        if (data.message) {
                                            showToastInfoTop(data.message, '', 10000);
                                            if(data.payload == 2 ||  data.payload == 3){
                                                sendSmsAll(wsGlobal);
                                            }

                                        } else {
                                            alert("Có lỗi: " + JSON.stringify(data))
                                        }
                                    },
                                    error: function (data) {
                                        hideWaittingIcon();
                                        console.log(" DATAx ", data);
                                        if (data.responseJSON && data.responseJSON.message)
                                            alert('Error call api: ' + "\n" + data.responseJSON.message)
                                        else
                                            alert('Error call api: ' + "\n" + url + "\n\n" + JSON.stringify(data).substr(0, 1000));
                                    }
                                })
                            }
                        } else if (data.message) {

                            if(data.payload == 2 ||  data.payload == 3){
                                sendSmsAll(wsGlobal);
                            }

                            alert(data.message);


                        } else {
                            alert("Có lỗi: " + JSON.stringify(data))
                        }
                    },
                    error: function (data) {
                        hideWaittingIcon();
                        console.log(" DATAx ", data);
                        if (data.responseJSON && data.responseJSON.message)
                            alert('Error call api: ' + "\n" + data.responseJSON.message)
                        else
                            alert('Error call api: ' + "\n" + url + "\n\n" + JSON.stringify(data).substr(0, 1000));
                    }
                });
            })

            $(".stop_send_tin").on('click', function () {
                console.log("stop Send tin ...");

                let event_id = $(this).parents('.action_event').data('id');
                let user_token = jctool.getCookie('_tglx863516839');

                let url = "/api/event-info/stopSendTinAll";

                $.ajax({
                    url: url,
                    type: 'POST',
                    data: {event_id: event_id},
                    async: false,
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', 'Bearer ' + user_token);
                    },
                    success: function (data, status) {
                        hideWaittingIcon();
                        console.log("Data ret6: ", data, " \nStatus: ", status);

                        if (data.payload) {
                            showToastInfoTop(data.payload);
                        } else {
                            alert("Có lỗi: " + JSON.stringify(data))
                        }
                    },
                    error: function (data) {
                        hideWaittingIcon();
                        console.log(" DATAx ", data);
                        if (data.responseJSON && data.responseJSON.message)
                            alert('Error call api: ' + "\n" + data.responseJSON.message)
                        else
                            alert('Error call api: ' + "\n" + url + "\n\n" + JSON.stringify(data).substr(0, 1000));
                    }
                });

            })

        </script>


        <script>
            var  wsGlobal = null;
            let countReconnect = 0;

            function addLogGood(log) {
                if(!document.getElementById('status_app'))
                    return;
                document.getElementById('status_app').innerHTML = log;
                document.getElementById('status_app').style.color = " Green ";

            }

            function addLogError(log) {
                if(!document.getElementById('status_app'))
                    return;
                document.getElementById('status_app').innerHTML = "" + log;
                document.getElementById('status_app').style.color = " RED ";
                // document.getElementById('status_app').style.fontWeight = " bold ";
                // document.getElementById('status_app').style.fontSize = " 120% ";

            }


            function sendSmsAll(socket){
                // let user_token = jctool.getCookie('_tglx863516839');
                // const wsServerUrl = 'wss://events.dav.edu.vn:51111?tkx=' + user_token;
                // Kết nối tới WebSocket server
                // const socket = new WebSocket(wsServerUrl);
                // Lắng nghe sự kiện mở kết nối
                socket.onopen = () => {
                    console.log('Connected to WebSocket server');
                };
                // Lắng nghe khi nhận tin nhắn từ server
                socket.onmessage = (event) => {
                    console.log(`Server: ${event.data}`);
                    // const messagesDiv = document.getElementById('messages');
                    // const message = document.createElement('div');
                    // message.textContent = `Server: ${event.data}`;
                    // messagesDiv.appendChild(message);
                };

                // Lắng nghe khi kết nối bị đóng
                socket.onclose = () => {
                    console.log('Disconnected from WebSocket server');
                };

                // Lắng nghe lỗi
                socket.onerror = (error) => {
                    console.error('WebSocket error:', error);
                };

                // Gửi tin nhắn
                if (socket.readyState === WebSocket.OPEN) {
                    // socket.send("send_all_sms_events_in_back_ground");
                    // alert ('Lệnh đã gửi xuống App SMS');
                    console.log(`Message sent`);
                } else {
                    alert ('Socket is not open ?');
                    console.log('Socket is not open?');
                }

            }

            window.addEventListener('load', function (e) {
                console.log("onload2");
            });

            window.addEventListener('load', function (e) {

                console.log("onload1 ...");
                let token = jctool.getCookie('_tglx863516839');
                const connectWebSocket = () => {
                    countReconnect++;

                    wsGlobal = new WebSocket('wss://<?php echo UrlHelper1::getDomainHostName() ?>:51111?tkx=' + token);

                    wsGlobal.onopen = function () {
                        console.log('Connected to WebSocket server');
                        addLogError('Đang kiểm tra kết nối App SMS Gateway... ');
                        // statusIcon.classList.remove('blinking-red');
                        // statusIcon.classList.add('blinking-green');
                    };

                    wsGlobal.onmessage = function (event) {
                        console.log('Message from server: ', event.data);


                        if (event.data.includes('ping_check_alive_mobile:not_alive')) {
                            addLogError("Chưa gửi được SMS. Cần liên hệ Admin để bật APP gửi SMS!");
                            return;
                        }

                        //nếu event.data có chứa chuỗi: 'ping_check_alive_mobile:' + '<?php echo getCurrentUserId() ?>'
                        //thì là có kết nối
                        if (event.data.includes('ping_check_alive_mobile:ok_alive:')) {
                            //ping_check_alive_mobile:ok_alive lấy
                            let uidInstring = event.data.replace('ping_check_alive_mobile:ok_alive:', '');
                            //addLogGood('App Gửi SMS đang kết nối với Tài khoản của bạn: <b> "<?php echo getCurrentUserEmail() ?>"');
                            addLogGood(`App SMS sẵn sàng (Logged in: <b> ${uidInstring}</b>)`);
                            return;
                        }

                    };

                    wsGlobal.onclose = function () {
                        setTimeout(connectWebSocket, 2000); // Attempt to reconnect after 2 seconds
                    };

                    wsGlobal.onerror = function (error) {
                        console.log('WebSocket error: ');
                        addLogError('Chưa gửi được SMS. Cần liên hệ Admin để bật APP gửi SMS (Status Server chưa sẵn sàng)')
                        wsGlobal.close();
                    };
                };
                connectWebSocket();

                //Vòng lặp timeout 1 giây, ping đến server gửi 1 tin nhắn check một client khác có tồn tại không
                setInterval(function () {
                    if (wsGlobal.readyState === WebSocket.OPEN) {
                        console.log(" CUID = " + '<?php echo getCurrentUserId() ?>');
                        wsGlobal.send('ping_check_alive_mobile:' + '<?php echo getCurrentUserId() ?>');
                    }
                }, 3000);

            });

            window.addEventListener('load', function (e) {

                console.log("onload0 ...");

                // checkStatusWebSocketWithThisUserAccount()

                $("#status_app").html(" ...  ");

                // $("textarea[name^='sms_content']").each(function () {
                //     var text = this.value;
                //     var byteCount = new Blob([text]).size;
                //     console.log('Byte count:', byteCount);
                //     let field = this.name;
                //     $("div[data-namex2='" + field + "']").html("Number char: " + byteCount + " / " + text.length);
                // })
                //
                // $("textarea[name^='sms_content']").on('click change keyup', function (e) {
                //     var text = e.target.value;
                //     var byteCount = new Blob([text]).size;
                //     console.log('Byte count:', byteCount, text.size);
                //     let field = e.target.name;
                //     $("div[data-namex2='" + field + "']").html("Number char: " + byteCount + " / " + text.length);
                // })
            });

            $(function () {


            })

            $(function () {
                $("#send_mail_test").on("click", function () {

                    console.log(" send_mail_test ...");

                    let testId = '<?php echo request('id') ?>';
                    let user_token = jctool.getCookie('_tglx863516839');

                    showWaittingIcon();
                    let url = "/api/event-info/sendMailTest";
                    url = "/api/event-info/sendMailTest";
                    $.ajax({
                        url: url,
                        type: 'POST',
                        data: {testId: testId},
                        async: false,
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader('Authorization', 'Bearer ' + user_token);
                        },
                        success: function (data, status) {
                            hideWaittingIcon();
                            console.log("Data ret1: ", data, " \nStatus: ", status);

                            if (data.payload) {
                                showToastInfoTop(data.payload, '', 10000);
                            } else {
                                alert("Có lỗi: " + JSON.stringify(data))
                            }
                        },
                        error: function (data) {
                            hideWaittingIcon();
                            console.log(" DATAx ", data);
                            if (data.responseJSON && data.responseJSON.message)
                                alert('Error call api: ' + "\n" + data.responseJSON.message)
                            else
                                alert('Error call api: ' + "\n" + url + "\n\n" + JSON.stringify(data).substr(0, 1000));
                        }
                    });


                })
            })

        </script>

        <?php
    }

    //...

    public function extraCssInclude()
    {
        ?>
        <style>


            input.input_value_to_post.parent_id{
                /*display: none!important;*/
            }

            span.tree_select.parent_id{
                /*display: none!important;*/
            }

            .action_event .sub {
                display: flex;
                justify-content: space-between;
            }

            .action_event {
                /*width: 1100px;*/

                border: 1px solid #ccc;
                padding: 20px 15px 15px 15px;
                background-color: white;
                text-align: left;
                font-size: 90%;
                border-radius: 5px;
                margin-bottom: 15px;
            }

            .select_type {
                height: 30px;
                padding-left: 10px;
                display: inline-block;
                width: 100% !important;
                border: 1px solid #ccc !important;
                margin-bottom: 10px;
            }

            input[name='action[]'] {
                display: none;
            }

            button.send_tin {
                margin-right: 5px;
            }

            .action_zone {
                text-align: center;
                border-radius: 5px;
                /*border: 1px solid #bbb!important;*/
                display: block;
                margin-bottom: 10px;
            }

            .action_zone button {
                display: inline-block;
                width: 100% !important;
            }
        </style>
        <?php
    }

    public function extraCssIncludeEdit()
    {

        ?>

        <!-- /.modal -->

        <style>

            .divTable2CellEdit[data-field-div="_sub_event_list"] div.one_item_edit{
                /*max-width: 100%!important;*/
                padding: 0px;
                margin: 10px;
            }

            .divTable2CellEdit[data-field-div="parent_id"] .select_to_add {
                max-width: 800px!important;
                /*padding: 0px 10px;*/
                margin: 0px 10px;
            }

            .choices__inner {
                /*margin: 0px 15px;*/
            }
            .choices__list--single {
                padding: 0px;
            }
            .check_sub_event{
                display: none;
            }


            .send_test_div {
                border: 1px solid #eee;
                padding: 5px;
                background-color: white;
            }

            .send_test_div select {
                padding: 5px;
                color: black;
            }


            .divTable2Body .divTable2Row {

                <?php if(Helper1::getCurrentActionMethod() == 'edit'){
                    ?>
                display: none;
                <?php
                }
                ?>
            }

            .divTable2Body .divTable2Row[data-field="parent_id"] ,  .divTable2Row[data-field="_sub_event_list"]  {
            <?php if(Helper1::getCurrentActionMethod() == 'edit'){
                ?>
                display: table-row;
            <?php
            }
            ?>
            }

            .divTable2Row.for_seperatorHeader, .divTable2Row.dummy_item {
                display: table-row;
            }

        </style>
        <?php
    }

    public function extraHtmlIncludeEdit01()
    {
//    echo "<br/>\n ABC123";
    }

    public function extraHtmlIncludeEdit0()
    {
        ?>
        <!-- Button trigger modal -->

        <!-- Modal -->
        <div class="modal fade " id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalCenterTitle">Chọn các thành viên của sự kiện để gửi tin</h5>
                        <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">

                        <style>
                            .select_user select{
                                font-size: smaller;
                            }
                            .select_user option{
                                font-size: smaller;
                            }
                            .select_user input{
                                font-size: smaller;
                            }
                            .user_list td, .user_list th{
                                font-size: smaller;
                            }

                        </style>

                        <div class="user_list mt-0">

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Chọn</button>
                    </div>
                </div>
            </div>
        </div>

        <?php
        if (!request('id'))
            return;;
        $obj = EventInfo::find(request('id'));

        $domain = UrlHelper1::getDomainHostName();
        $module = Helper1::getModuleCurrentName();

        if (getCurrentActionMethod() !== 'edit') {
//            return "Sau khi tạo sự kiện ta có thể Thao tác (SMS, Email...)";
        }


        $mUserSend = EventAndUser::where('event_id', $obj->id)->get();
        $tt = count($mUserSend);
        $fromMail = SiteMng::getEmailAdmin();
        $fromName = SiteMng::getSiteCode();
        $uidL = '';
        $nTuChoi = $nCoMat = $nThamGia = 0;
        foreach ($mUserSend as $ue) {
            if ($ue->confirm_join_at) {
                $nThamGia++;
            }
            if ($ue->deny_join_at) {
                $nTuChoi++;
            }
            if ($ue->attend_at) {
                $nCoMat++;
            }

            $uidL .= "$ue->user_event_id,";
        }

        //  /admin/event-user-info?seby_s1=11&seoby_s1=eq

        $uidL = trim($uidL, ',');

        $ret = "<div class='action_event' data-id='$obj->id' style=''> ";

        $ret .= "<div class='action_zone1'><i class='fa fa-search mr-2'></i>
THEO DÕI QUẢN LÝ KHÁCH THAM DỰ</div> ";


        if (1) {
            if (getCurrentActionMethod() === 'edit') {


                $ret .= " <span></span> ";
            }


            $ret .= "<div class='sub'>";
//            $ret .= "<a
//title = 'Xem danh sách sự kiện + user'
// target='_blank' href='/admin/event-and-user?seby_s4=$obj->id'>
//<button class='btn btn-primary  btn-sm'>
//<i class='fa fa-external-link-alt'></i>
//User & Actions
//</button>
//</a>";

            $ret .= "
<a href='/$module/event-user-info?_add_user_to=$obj->id' title='Thêm thành viên vào sự kiện'>
<button class='btn btn-primary btn-sm'>
<i class='fa fa-plus'></i>
Thêm ĐB
</button>
</a>
";


            if ($uidL) {
                $ret .= "&nbsp&nbsp
               <a
               title = 'Xem danh sách chi tiet user'
               href='/$module/event-user-info?seby_s1=$uidL&seoby_s1=in'>

            <button class='btn btn-primary  btn-sm'>
            <i class='fa fa-users'></i>
            Chi tiết ĐB
            </button>
            </a>
                ";
            }


            $ret .= "&nbsp&nbsp
               <a
               title = 'Xem bảng user gắn với sự kiện'
               href='/$module/event-and-user?seby_s5=$obj->id'>

            <button class='btn btn-primary  btn-sm'>
            <i class='fa fa-users'></i>
            DS Đại biểu
            </button>
            </a>
                ";

            $ret .= " &nbsp&nbsp
 <a
title = 'Duyệt thành viên vào sự kiện'
 href='/$module/event-register?seby_s11=$obj->id'>
<button class='btn btn-primary btn-sm'>
<i class='nav-icon fa fa-plus-circle'></i> Duyệt online
</button>
</a>";

//            $ret .= " &nbsp&nbsp
// <a
//title = 'Report this event'
// target='_blank' href='/admin/event-info/report?id=$obj->id'>
//<button class='btn btn-primary btn-sm'>
//<i class='nav-icon fa fa-cog'></i> Báo cáo Public
//</button>
//</a>";

            $ret .= " &nbsp&nbsp
 <a
title = 'Report this event'
 target='_blank' href='/$module/event-info/report-sum?id=$obj->id'>
<button class='btn btn-primary btn-sm'>
<i class='nav-icon fa fa-cog'></i> Báo cáo tổng
</button>
</a>";


            $ret .= " &nbsp&nbsp <a
title = 'Log SMS, Email'
 target='_blank' href='/$module/event-send-info-log?seby_s4=$obj->id'>
<button class='btn btn-primary  btn-sm'>
<i class='fa fa-list'></i> Nhật ký gửi tin
</button>
</a>";

            $ret .= "</div>";
//            $ret .= "<div class='sub'>";

            $ret .= "<div class='mt-3 mb-2' style='border-bottom: 0px solid #ccc; padding-bottom: 10px; display: flex; justify-content: space-between' >
<button class='btn btn-default btn-sm'> Số thành viên: <span class='badge bg-primary'> $tt </span> </button> ";
            $ret .= "<button class='btn btn-default btn-sm'>Xác nhận tham gia: <span class='badge bg-primary'> $nThamGia</span> </button> ";
            $ret .= "<button class=' btn btn-default btn-sm'>Từ chối tham gia: <span class='badge bg-primary'>$nTuChoi</span> </button>";
            $ret .= "<button class=' btn btn-default btn-sm'>Đã check-in: <span class='badge bg-primary'> $nCoMat </span></button>";
            $ret .= '</div>';

            $idEvEnc = qqgetRandFromId_($obj->id);
            $linkReg = "https://$domain/event-register/$idEvEnc";
            $ret .= "<div style='width: 100%; margin-bottom: 10px; '> Link để khách Đăng ký sự kiện này: <a target='_blank' href='$linkReg'>$linkReg</a>  </div>";

            $padButton = '';
            if(isDebugIp())
                $padButton = '        <button type="button" class="btn btn-default btn-sm" data-bs-toggle="modal" data-bs-target="#exampleModalCenter">
            Test Chọn Thành viên
        </button>
';

            $ret .= "<div style='' class='action_zone2'>
<i class='fa fa-envelope mr-2'></i>
 LIÊN HỆ, THÔNG TIN VỚI KHÁCH &nbsp &nbsp $padButton
</div> ";

            $ret .= "<div style='width: 100%; margin-bottom: 10px; '>";


        }
        if (getCurrentActionMethod() === 'index') {
            $ret .= ' <a href="/$module/event-info/edit/' . $obj->id . '"> <button class="btn btn-sm btn-info" type="button"> CHI TIẾT </button> </a>';
        } else {

            $mailToSend = request('mail_to_send');

            $ret .= '<textarea placeholder="Nhập danh sách user muốn gửi tin bằng cách nhập các email, cách nhau dấu phẩy.
(nếu có DS này, thì sẽ chỉ gửi Email, SMS theo DS này)"
id="user_email_send_override" style="border: 1px solid #ccc; width: 100%; height: 80px; padding: 5px; margin-top: 5px">' . $mailToSend . '</textarea>';

            $slUser = "<select class='select_type select_user_type' data-ev-id='$obj->id'>
<option value='all_user'>
--- Tới tất cả ---
</option>
<option value='only_not_yet_confirmed_user'>
--- Khách chưa xác nhận tham dự (Chưa bấm Link) ---
</option>
<option value='only_confirmed_user'>
--- Khách đã xác nhận tham dự (Đã bấm Link) ---
</option>
<option value='only_not_attended_user'>
--- Khách chưa Check-in  (chưa Quét QR) ---
</option>
<option value='only_attended_user'>
--- Khách đã Check-in (đã Quét QR) ---
</option>
<option value='only_confirmed_but_not_checkin'>
--- Khách xác nhận Tham dự & Chưa check-in ---
</option>
<option value='only_denied_user'>
--- Khách từ chối tham dự (Bấm link Từ chối) ---
</option>
<option value='only_list_user'>
--- Lựa chọn danh sách ---
</option>

</select>
";
            $meta = $obj::getMetaObj();
            if ($meta instanceof MetaOfTableInDb) ;
            $mmMeta = ($meta->getMetaDataApi());
            $slContMail = "<select title='Ở đây không cần chọn ngôn ngữ EN, vì PM tự nhận ngôn ngữ content tương ứng user khi gửi' class='select_type select_mail_content' data-ev-id='$obj->id'>";
            foreach ($mmMeta as $fieldName => $tmp) {
                //Không cần chọn en, vì script đã tự select theo user
                if (str_ends_with($fieldName, 'en'))
                    continue;
                if (str_starts_with($fieldName, 'content')) {
                    $d1 = $meta->getDescOfField($fieldName);
                    $slContMail .= " <option value='$fieldName'> $d1 </option>";
                }
            }

            $slContMail .= "</select>";

            $slContSms = "<select class='select_type select_sms_content' name='abc' data-ev-id='$obj->id'>";

            foreach ($mmMeta as $fieldName => $tmp) {
                //Bỏ qua tiếng anh, vì TA sẽ tự đông chọn theo từng user
                if (str_ends_with($fieldName, 'en'))
                    continue;
                if (str_starts_with($fieldName, 'sms_content')) {
                    $d1 = $meta->getDescOfField($fieldName);
                    $slContSms .= " <option value='$fieldName'> $d1 </option>";
                }
            }

//        $d1 = $meta->getDescOfField('sms_content1');
//        $slContSms.=" <option value='sms_content1'> $d1 </option>";
//        $d2 = $meta->getDescOfField('sms_content2');
//        $slContSms.=" <option value='sms_content2'> $d2 </option>";
//        $d3 = $meta->getDescOfField('sms_content3');
//        $slContSms.=" <option value='sms_content3'> $d3 </option>";

            $slContSms .= "</select>";

//            $ret .= "<div class='row'>";

            $ret .= "<div style='margin-top: 11px' data-ev-id='$obj->id'>

<div class='row'>
<div class='action_zone col-sm-6'>

$slUser
 <br>
 $slContMail
<br>
<button type='button'  style='text-align: center; font-size: small' class='send_tin email btn btn-primary btn-sm'> Gửi Email</button>

<div style='float: left; text-align: left' class='mt-2'>
  Cấu hình gửi mail: Gửi từ <b>  $fromMail</b>, Tên: <b>   $fromName </b>    <a target='_blank' href='/admin/site-mng/edit/1'>  [Thay đổi] </a>
</div>
</div>


<div class='action_zone  col-sm-6' data-code-pos='ppp17334468351691'>

        $slUser
        <br>
        $slContSms
        <br>
        <button type='button'  style='text-align: center; font-size: small; ' class='send_tin sms btn btn-primary btn-sm'> Gửi Sms</button>

        <div style='float: left; text-align: left' class='mt-2'>
        <div id='status_app' style=''> ... </div>
</div>
        </div>

        </div>






        ";
//            $ret .= "
//<div class='action_zone'>
//<button type='button' style='text-align: center; font-size: small' class='stop_send_tin btn btn-warning btn-sm'> Dừng gửi</button>
//</div>
//";

            $ret .= '</div>';

            $done = '';
            if ($evs = EventSendAction::where(['event_id' => $obj->id])->first()) {
                if ($evs->done) {
//                $done = ' Đã gửi thành công !';
                }
            }

            $ret .= '<div style="margin-top: 5px; padding: 5px; background-color: lavender; color: dodgerblue">
<div style="min-width: 300px" id="event_send_status_' . $obj->id . '">
</div>' . $done . '</div>';

        }

        $ret .= "</div>";

//        $ret .= "<button type='button'  style='text-align: center; font-size: small;' data-ev-id='$obj->id' class='sync_sms sms btn btn-primary btn-sm'
//title='Đồng bộ Tin nhắn sms Từ app trên mobile lên Database trên server. Hãy bật App trên Mobile, và kiểm tra chế độ đã kết nối trên App, sau đó bấm nút Đồng bộ này'
//
//> Sync Sms</button>";

        $cmd = '/var/www/html/public/tool1/_site/event_mng/send_event_sms_mail_loop.php';

        $linkLog = '';
        if (Helper1::isAdminModule())
            $linkLog = "  <a href='/tool1/_site/event_mng/read_log_file_event.php' target='_blank'> Xem Log File </a>";

        $linkSendCmd = " | <a href='/$module/event-send-action?seby_s11=$obj->id' target='_blank'> Các lệnh Gửi tin đã tạo </a>";
        $runningScript = "$cmd";
        exec("ps aux | grep $runningScript |grep -v grep", $output);
        if (str_contains(serialize($output), $cmd))
            $ret .= "<div class='py-2 pr-2 mb-1' style='color: green; '> Tiến trình gửi Email đang hoạt động bình thường &nbsp
  $linkLog $linkSendCmd </div>";
        else
            $ret .= "<DIV class='mt-3 py-1 px-2 bg-danger' style='color: red; '> Cánh báo: Tiến trình Gửi Email KHÔNG HOẠT ĐỘNG,
các lệnh gửi SMS, Email sẽ chạy khi tiến trình hoạt động $linkLog !
 <br>
 Hãy chạy lệnh: <b> glxNcbdMailSend </b> tại dòng lệnh trên server

 </DIV> <br> $linkLog $linkSendCmd ";


//        if(isSupperAdmin_())
        {
//            $ret .= "<div id='status_app' style=''> ... </div>";
        }


        $ret .= '</div>';

        echo $ret;
//        return $ret;
?>

        <?php
    }

    function _parent_id($obj, $val, $field){
//        return "ABC";

        if(Helper1::getCurrentActionMethod() == 'index')
            return;
        ?>
        <?php

        $retP = parent::_parent_id($obj, $val, $field);

        $ret = "
        <div id='dynamic-select-container_$obj->id' class='select_to_add mb-3' data-code-pos='ppp17356059221'>
            <select id='dynamic-select_$obj->id' placeholder='Choose an option...' data-code-pos='ppp16059857431'>
                <option value='0' selected> --- Chọn sự kiện cha ---</option> <!-- Title ban đầu -->
            </select>
        </div>";

        return $ret;
    }

    function _name($obj, $val)
    {
//        return "<div class='mx-2' style=' display: inline-block; font-size: 80%; white-space: nowrap;   overflow: hidden;    text-overflow: ellipsis; '><a  href='/admin/event-info/edit/$obj->id'> $obj->name </a></div>";

    }

    public function extraJsInclude() {
        ?>

        <style>

           div.select_to_add {

                background: snow;
                padding: 1px 5px!important;
                display: block!important;
                border: 0px dashed #ccc!important;
            }

            .input_value_to_post.name:hover {
                cursor: pointer;
            }
        </style>
        <script>
            $(".input_value_to_post.name").click(function (){
                let dataId = $(this).attr('data-id');
                location.href = "/admin/event-info/edit/" + dataId;
            })
            // $(".divTable2Cell[data-table-field=name]").click(function (){
            //     let dataId = $(this).attr('data-id');
            //     location.href = "/admin/event-info/edit/" + dataId;
            // })
        </script>
        <?php
    }


    function preZoneFieldEdit($field, $obj = null)
    {
//        return;
//        if(!isIPDebug()){
//            return;
//        }

        $ret = '';

        if($field == 'id'){
            return $ret = "<i class='nav-icon fa fa-plus-circle mr-1'></i>THÔNG TIN CƠ BẢN VỀ SỰ KIỆN";
        }

        if($field == 'sms_content1'){
            return $ret = "<i class='nav-icon fa fa-plus-circle mr-1'></i> NỘI DUNG SMS TIẾNG VIỆT / TIẾNG ANH ";
        }

        if($field == 'mail_title1'){
            return $ret = "<i class='nav-icon fa fa-plus-circle mr-1'></i> NỘI DUNG EMAIL TIẾNG VIỆT / TIẾNG ANH";
        }

//        if($field == 'reg_mail_title_vi1')
        if($field == 'allow_public_reg')
        {
            return $ret = "<i class='nav-icon fa fa-plus-circle mr-1'></i>  CÀI ĐẶT - ĐIỀU KHIỂN VIỆC ĐĂNG KÝ ĐẠI BIỂU - SỰ KIỆN";
        }

        if($field == 'user_id') {
            return $ret = "<i class='nav-icon fa fa-plus-circle mr-1'></i>  THÔNG TIN KHÁC";
        }

        if($field == 'parent_id') {
            return $ret = "<i class='nav-icon fa fa-plus-circle mr-1'></i>  SỰ KIỆN CHA - CON";
        }


        return $ret;
    }


}
